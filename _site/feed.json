{
    "version": "https://jsonfeed.org/version/1",
    "title": "devai.b",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "personal blog",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/swiftui/iExpense",
            "title": "iExpense",
            "summary": "Bring in a second view with this expense tracking app",
            "content_text": "Keywords  UserDefaults  Codable  sheet()  onDelete()  @ObservedObjectKeynotes  The presentation mode of a view contains only two things: a property determining whether it’s visible right now, and a method to dismiss it  UUID already conforms to Codable  @Published announces changes from a property; @ObservedObject watches an observed object for changes  If we add Codable conformance to a type, Swift can generate archiving and unarchiving code for us  UserDefaults is stringly typed (its key names are all strings)  The onDelete() modifier exists only on ForEach  If we use integer(forKey:) and UserDefaults can’t find the key we asked for, it sends back 0  UUIDs aren’t guaranteed to be unique, but the odds of a collision are extremely low  EditButton() will automatically switch between Edit and Done when tapped  IndexSet is a sorted set of integers which is used for deleting views from a ForEach viewCode////  ContentView.swift//  iExpense//import SwiftUIstruct ExpenseItem: Identifiable, Codable {    let id = UUID()    let name: String    let type: String    let amount: Int        enum CodingKeys: String, CodingKey {        case name, type, amount    }}class Expenses: ObservableObject {    @Published var items: [ExpenseItem] {        didSet {            let encoder = JSONEncoder()            if let encoded = try? encoder.encode(items) {                UserDefaults.standard.set(encoded, forKey: \"Items\")            }        }    }        init() {        if let items = UserDefaults.standard.data(forKey: \"Items\") {            let decoder = JSONDecoder()            if let decoded = try? decoder.decode([ExpenseItem].self, from: items) {                self.items = decoded                return            }        }        self.items = []    }}struct ContentView: View {    @ObservedObject var expenses = Expenses()    @State private var showingAddExpense = false        var body: some View {        NavigationView {            List {                ForEach(expenses.items) { item in                    HStack {                        VStack(alignment: .leading) {                            Text(item.name)                                .font(.headline)                            Text(item.type)                        }                        Spacer()                        Text(\"$\\(item.amount)\")                    }                }                .onDelete(perform: removeItems)            }            .navigationBarItems(                leading:                    EditButton(),                trailing:                    Button(action: {                        self.showingAddExpense = true                    }) {                        Image(systemName: \"plus\")                    }            )        }        .sheet(isPresented: $showingAddExpense, content: {            AddView(expenses: self.expenses)        })    }        func removeItems(at offsets: IndexSet) {        expenses.items.remove(atOffsets: offsets)    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  AddView.swift//  iExpense//import SwiftUIstruct AddView: View {    @Environment(\\.presentationMode) var presentationMode        @ObservedObject var expenses: Expenses        @State private var name = \"\"    @State private var type = \"Personal\"    @State private var amount = \"\"    @State private var showingAlert = false        static let types = [\"Business\", \"Personal\"]        var body: some View {        NavigationView {            Form {                TextField(\"Name\", text: $name)                Picker(\"Type\", selection: $type) {                    ForEach(Self.types, id: \\.self) {                        Text($0)                    }                }                TextField(\"Amount\", text: $amount)                    .keyboardType(.numberPad)            }            .navigationBarTitle(\"Add new expense\")            .navigationBarItems(trailing: Button(\"Save\") {                if let actualAmount = Int(self.amount) {                    let item = ExpenseItem(name: self.name, type: self.type, amount: actualAmount)                    self.expenses.items.append(item)                    self.presentationMode.wrappedValue.dismiss()                } else {                    showingAlert = true                }            })            .alert(isPresented: $showingAlert, content: {                Alert(title: Text(\"Invalid Input\"), message: Text(\"Please use a number\"),                dismissButton: .default(Text(\"OK\")))            })        }    }}struct AddView_Previews: PreviewProvider {    static var previews: some View {        AddView(expenses: Expenses())    }}",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>UserDefaults</li>  <li>Codable</li>  <li>sheet()</li>  <li>onDelete()</li>  <li>@ObservedObject</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li>The presentation mode of a view contains only two things: a property determining whether it’s visible right now, and a method to dismiss it</li>  <li><code class=\"highlighter-rouge\">UUID</code> already conforms to <code class=\"highlighter-rouge\">Codable</code></li>  <li><code class=\"highlighter-rouge\">@Published</code> announces changes from a property; <code class=\"highlighter-rouge\">@ObservedObject</code> watches an observed object for changes</li>  <li>If we add <code class=\"highlighter-rouge\">Codable</code> conformance to a type, Swift can generate archiving and unarchiving code for us</li>  <li><code class=\"highlighter-rouge\">UserDefaults</code> is stringly typed (its key names are all strings)</li>  <li>The <code class=\"highlighter-rouge\">onDelete()</code> modifier exists only on <code class=\"highlighter-rouge\">ForEach</code></li>  <li>If we use <code class=\"highlighter-rouge\">integer(forKey:)</code> and <code class=\"highlighter-rouge\">UserDefaults</code> can’t find the key we asked for, it sends back 0</li>  <li><code class=\"highlighter-rouge\">UUID</code>s aren’t guaranteed to be unique, but the odds of a collision are extremely low</li>  <li><code class=\"highlighter-rouge\">EditButton()</code> will automatically switch between <strong>Edit</strong> and <strong>Done</strong> when tapped</li>  <li><code class=\"highlighter-rouge\">IndexSet</code> is a sorted set of integers which is used for deleting views from a <code class=\"highlighter-rouge\">ForEach</code> view</li></ol><h3 id=\"code\">Code</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  iExpense</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ExpenseItem</span><span class=\"p\">:</span> <span class=\"kt\">Identifiable</span><span class=\"p\">,</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"kt\">UUID</span><span class=\"p\">()</span>    <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>        <span class=\"kd\">enum</span> <span class=\"kt\">CodingKeys</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">CodingKey</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">amount</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"kt\">Expenses</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">items</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">ExpenseItem</span><span class=\"p\">]</span> <span class=\"p\">{</span>        <span class=\"k\">didSet</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">encoder</span> <span class=\"o\">=</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">encoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"Items\"</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">items</span> <span class=\"o\">=</span> <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"Items\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">decoder</span> <span class=\"o\">=</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">decoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">([</span><span class=\"kt\">ExpenseItem</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">decoded</span>                <span class=\"k\">return</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">expenses</span> <span class=\"o\">=</span> <span class=\"kt\">Expenses</span><span class=\"p\">()</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingAddExpense</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">List</span> <span class=\"p\">{</span>                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"k\">in</span>                    <span class=\"kt\">HStack</span> <span class=\"p\">{</span>                        <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>                                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                        <span class=\"kt\">Spacer</span><span class=\"p\">()</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"$</span><span class=\"se\">\\(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"nf\">onDelete</span><span class=\"p\">(</span><span class=\"nv\">perform</span><span class=\"p\">:</span> <span class=\"n\">removeItems</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span>                <span class=\"nv\">leading</span><span class=\"p\">:</span>                    <span class=\"kt\">EditButton</span><span class=\"p\">(),</span>                <span class=\"nv\">trailing</span><span class=\"p\">:</span>                    <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span>                        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingAddExpense</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                    <span class=\"p\">})</span> <span class=\"p\">{</span>                        <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"plus\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>            <span class=\"p\">)</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAddExpense</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>            <span class=\"kt\">AddView</span><span class=\"p\">(</span><span class=\"nv\">expenses</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">expenses</span><span class=\"p\">)</span>        <span class=\"p\">})</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">removeItems</span><span class=\"p\">(</span><span class=\"n\">at</span> <span class=\"nv\">offsets</span><span class=\"p\">:</span> <span class=\"kt\">IndexSet</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">expenses</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"nv\">atOffsets</span><span class=\"p\">:</span> <span class=\"n\">offsets</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  AddView.swift</span><span class=\"c1\">//  iExpense</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">AddView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">presentationMode</span>        <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">expenses</span><span class=\"p\">:</span> <span class=\"kt\">Expenses</span>        <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"Personal\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">amount</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingAlert</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Business\"</span><span class=\"p\">,</span> <span class=\"s\">\"Personal\"</span><span class=\"p\">]</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">Form</span> <span class=\"p\">{</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Name\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">name</span><span class=\"p\">)</span>                <span class=\"kt\">Picker</span><span class=\"p\">(</span><span class=\"s\">\"Type\"</span><span class=\"p\">,</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>                    <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Amount\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">amount</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">keyboardType</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">numberPad</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Add new expense\"</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span><span class=\"nv\">trailing</span><span class=\"p\">:</span> <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">actualAmount</span> <span class=\"o\">=</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"p\">)</span> <span class=\"p\">{</span>                    <span class=\"k\">let</span> <span class=\"nv\">item</span> <span class=\"o\">=</span> <span class=\"kt\">ExpenseItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"n\">actualAmount</span><span class=\"p\">)</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">expenses</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">()</span>                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                    <span class=\"n\">showingAlert</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                <span class=\"p\">}</span>            <span class=\"p\">})</span>            <span class=\"o\">.</span><span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAlert</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"kt\">Alert</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Invalid Input\"</span><span class=\"p\">),</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Please use a number\"</span><span class=\"p\">),</span>                <span class=\"nv\">dismissButton</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"OK\"</span><span class=\"p\">)))</span>            <span class=\"p\">})</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">AddView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">AddView</span><span class=\"p\">(</span><span class=\"nv\">expenses</span><span class=\"p\">:</span> <span class=\"kt\">Expenses</span><span class=\"p\">())</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/iExpense",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-10-19T00:00:00-04:00",
            "date_modified": "2020-10-19T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/photo/test",
            "title": "Photo Test",
            "summary": "Photo test.",
            "content_text": "",
            "content_html": "<p><img src=\"/assets/img/chemin_wakefield_heights.jpg\" alt=\"Chemin Wakefield-Heights\" /></p>",
            "url": "http://localhost:4000/photo/test",
            
            
            
            
            
            "date_published": "2020-10-19T00:00:00-04:00",
            "date_modified": "2020-10-19T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/animation",
            "title": "Animation",
            "summary": "Learning SwiftUI with hackingwithswift.",
            "content_text": "Radial Buttonstruct ContentView: View {    @State private var animationAmount: CGFloat = 1        var body: some View{        Button(\"Tap Me\") {            self.animationAmount += 1        }        .padding(50)        .background(Color.red)        .foregroundColor(.white)        .clipShape(Circle())        .overlay(            Circle()                .stroke(Color.red)                .scaleEffect(animationAmount)                .opacity(Double(2 - animationAmount))                .animation(                    Animation.easeOut(duration: 1)                        .repeatForever(autoreverses: false)                )        )        .onAppear {            self.animationAmount = 2        }    }}Animation Bindingstruct ContentView: View {    @State private var animationAmount: CGFloat = 1        var body: some View {        VStack {            Stepper(\"Scale amount\", value: $animationAmount.animation(), in: 1...10)            Spacer()            Button(\"Tap Me\") {                self.animationAmount += 1            }            .padding(40)            .background(Color.red)            .foregroundColor(.white)            .clipShape(Circle())            .scaleEffect(animationAmount)        }    }}Explicit Animationsstruct ContentView: View {    @State private var animationAmount = 0.0        var body: some View {        Button(\"Tap Me\") {            withAnimation(.interpolatingSpring(stiffness: 5, damping: 1)) {                self.animationAmount += 360            }        }        .padding(50)        .background(Color.red)        .foregroundColor(.white)        .clipShape(Circle())        .rotation3DEffect(            .degrees(animationAmount),            axis: (x: 1, y: 0, z: 0))    }}Animation StackYou can attach the animation() modifier several times, and the order in which you use it matters.struct ContentView: View {    @State private var enabled = true        var body: some View {        Button(\"Tap Me\") {            self.enabled.toggle()        }        .frame(width: 200, height: 200, alignment: .center)        .background(enabled ? Color.blue : Color.red)        .animation(.default)        .foregroundColor(.white)        .clipShape(RoundedRectangle(cornerRadius: enabled ? 60 : 0))        .animation(.interpolatingSpring(stiffness: 10, damping: 1))    }}Animating Gesturestruct ContentView: View {    let letters = Array(\"Hello SwiftUI\")    @State private var enabled = false    @State private var dragAmount = CGSize.zero    var body: some View {        HStack(spacing: 0) {            ForEach(0..&lt;letters.count) { num in                Text(String(self.letters[num]))                    .padding(5)                    .font(.title)                    .background(self.enabled ? Color.blue : Color.red)                    .offset(self.dragAmount)                    .animation(Animation.default.delay(Double(num) / 20))            }        }        .gesture(            DragGesture()                .onChanged { self.dragAmount = $0.translation }                .onEnded { _ in                    self.dragAmount = .zero                    self.enabled.toggle()                }        )    }}Showing and Hiding Views with Transitionstruct ContentView: View {    @State private var isShowingRed = false        var body: some View {        VStack {            Button(\"Tap Me\") {                withAnimation {                    self.isShowingRed.toggle()                }            }                        if isShowingRed {                Rectangle()                    .fill(Color.red)                    .frame(width: 200, height: 200)                    .transition(.asymmetric(insertion: .scale, removal: .opacity))            }        }    }}Building Custom Transition with ViewModifierstruct CornerRotateModifier: ViewModifier {    let amount: Double    let anchor: UnitPoint    func body(content: Content) -&gt; some View {        content.rotationEffect(.degrees(amount), anchor: anchor).clipped()    }}extension AnyTransition {    static var pivot: AnyTransition {        .modifier(            active: CornerRotateModifier(amount: -90, anchor: .topLeading),            identity: CornerRotateModifier(amount: 0, anchor: .topLeading)        )    }}struct ContentView: View {    @State private var isShowingRed = false        var body: some View {        VStack {            Button(\"Tap Me\") {                withAnimation {                    self.isShowingRed.toggle()                }            }                        if isShowingRed {                Rectangle()                    .fill(Color.red)                    .frame(width: 200, height: 200)                    .transition(.pivot)            }        }    }}",
            "content_html": "<h3 id=\"radial-button\">Radial Button</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">animationAmount</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span><span class=\"p\">{</span>        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Circle</span><span class=\"p\">())</span>        <span class=\"o\">.</span><span class=\"nf\">overlay</span><span class=\"p\">(</span>            <span class=\"kt\">Circle</span><span class=\"p\">()</span>                <span class=\"o\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"nf\">scaleEffect</span><span class=\"p\">(</span><span class=\"n\">animationAmount</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"nf\">opacity</span><span class=\"p\">(</span><span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">animationAmount</span><span class=\"p\">))</span>                <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span>                    <span class=\"kt\">Animation</span><span class=\"o\">.</span><span class=\"nf\">easeOut</span><span class=\"p\">(</span><span class=\"nv\">duration</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">repeatForever</span><span class=\"p\">(</span><span class=\"nv\">autoreverses</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>                <span class=\"p\">)</span>        <span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"n\">onAppear</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"animation-binding\">Animation Binding</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">animationAmount</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">Stepper</span><span class=\"p\">(</span><span class=\"s\">\"Scale amount\"</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">animationAmount</span><span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(),</span> <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"mi\">10</span><span class=\"p\">)</span>            <span class=\"kt\">Spacer</span><span class=\"p\">()</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Circle</span><span class=\"p\">())</span>            <span class=\"o\">.</span><span class=\"nf\">scaleEffect</span><span class=\"p\">(</span><span class=\"n\">animationAmount</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"explicit-animations\">Explicit Animations</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">animationAmount</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"nf\">withAnimation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">interpolatingSpring</span><span class=\"p\">(</span><span class=\"nv\">stiffness</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nv\">damping</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">+=</span> <span class=\"mi\">360</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Circle</span><span class=\"p\">())</span>        <span class=\"o\">.</span><span class=\"nf\">rotation3DEffect</span><span class=\"p\">(</span>            <span class=\"o\">.</span><span class=\"nf\">degrees</span><span class=\"p\">(</span><span class=\"n\">animationAmount</span><span class=\"p\">),</span>            <span class=\"nv\">axis</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"animation-stack\">Animation Stack</h3><p>You can attach the animation() modifier several times, and the order in which you use it matters.</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"n\">enabled</span> <span class=\"p\">?</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"nv\">blue</span> <span class=\"p\">:</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">RoundedRectangle</span><span class=\"p\">(</span><span class=\"nv\">cornerRadius</span><span class=\"p\">:</span> <span class=\"n\">enabled</span> <span class=\"p\">?</span> <span class=\"mi\">60</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>        <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">interpolatingSpring</span><span class=\"p\">(</span><span class=\"nv\">stiffness</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">damping</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"animating-gesture\">Animating Gesture</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">letters</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"s\">\"Hello SwiftUI\"</span><span class=\"p\">)</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">dragAmount</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"o\">.</span><span class=\"n\">zero</span>    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">HStack</span><span class=\"p\">(</span><span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..&lt;</span><span class=\"n\">letters</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">num</span> <span class=\"k\">in</span>                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">letters</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]))</span>                    <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">enabled</span> <span class=\"p\">?</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"nv\">blue</span> <span class=\"p\">:</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">offset</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dragAmount</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"kt\">Animation</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">20</span><span class=\"p\">))</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">gesture</span><span class=\"p\">(</span>            <span class=\"kt\">DragGesture</span><span class=\"p\">()</span>                <span class=\"o\">.</span><span class=\"n\">onChanged</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dragAmount</span> <span class=\"o\">=</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">translation</span> <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"n\">onEnded</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"k\">in</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dragAmount</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">zero</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>                <span class=\"p\">}</span>        <span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"showing-and-hiding-views-with-transition\">Showing and Hiding Views with Transition</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">isShowingRed</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"n\">withAnimation</span> <span class=\"p\">{</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowingRed</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>                        <span class=\"k\">if</span> <span class=\"n\">isShowingRed</span> <span class=\"p\">{</span>                <span class=\"kt\">Rectangle</span><span class=\"p\">()</span>                    <span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">transition</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">asymmetric</span><span class=\"p\">(</span><span class=\"nv\">insertion</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"nv\">removal</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">))</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"building-custom-transition-with-viewmodifier\">Building Custom Transition with ViewModifier</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">CornerRotateModifier</span><span class=\"p\">:</span> <span class=\"kt\">ViewModifier</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"kt\">Double</span>    <span class=\"k\">let</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"kt\">UnitPoint</span>    <span class=\"kd\">func</span> <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"kt\">Content</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"nf\">rotationEffect</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">degrees</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">),</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"n\">anchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">clipped</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">extension</span> <span class=\"kt\">AnyTransition</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">pivot</span><span class=\"p\">:</span> <span class=\"kt\">AnyTransition</span> <span class=\"p\">{</span>        <span class=\"o\">.</span><span class=\"nf\">modifier</span><span class=\"p\">(</span>            <span class=\"nv\">active</span><span class=\"p\">:</span> <span class=\"kt\">CornerRotateModifier</span><span class=\"p\">(</span><span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">topLeading</span><span class=\"p\">),</span>            <span class=\"nv\">identity</span><span class=\"p\">:</span> <span class=\"kt\">CornerRotateModifier</span><span class=\"p\">(</span><span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">topLeading</span><span class=\"p\">)</span>        <span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">isShowingRed</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"n\">withAnimation</span> <span class=\"p\">{</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowingRed</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>                        <span class=\"k\">if</span> <span class=\"n\">isShowingRed</span> <span class=\"p\">{</span>                <span class=\"kt\">Rectangle</span><span class=\"p\">()</span>                    <span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">transition</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">pivot</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/animation",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-10-17T00:00:00-04:00",
            "date_modified": "2020-10-17T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}
{
    "version": "https://jsonfeed.org/version/1",
    "title": "devai.b",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "personal blog",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/digitaloceanmobile",
            "title": "Digital Ocean Mobile",
            "summary": "Digital Ocean Management Tool on iOS.",
            "content_text": "A Digital Ocean Management app on iOS using API v2.",
            "content_html": "<p>A Digital Ocean Management app on iOS using API v2.</p><script type=\"text/javascript\">function redirectToDigitalOceanMobile() {    var location = document.location;    console.log(location);    var url = location.href;    var redictedURL = url.replace(\"https://devaib.github.io/digitaloceanmobile:authenticate\", \"digitaloceanmobile:authenticate\");    console.log(redictedURL);    window.location.replace(redictedURL);}window.onload = redirectToDigitalOceanMobile;</script>",
            "url": "http://localhost:4000/digitaloceanmobile",
            
            
            
            
            
            "date_published": "2021-01-21T00:00:00-05:00",
            "date_modified": "2021-01-21T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swift/WeakSelf",
            "title": "Weak self",
            "summary": "Understand weak self.",
            "content_text": "Keywords  weak self  capture list  strong capture  weak capture  implicit capture  owned capture  retained cycle/reference  memory leakUnderstand what a capture list isimport UIKitfunc multiply(by multiplier: Int) -&gt; ((Int) -&gt; Int) {    return { (input: Int) -&gt; Int in        return input * multiplier    }}var multiplier = 2let multiplyTwo = multiply(by: multiplier)multiplyTwo(5) // 10multiplier = 3multiplyTwo(5) // 10multiplier = 4let multiplyFour = multiply(by: multiplier)multiplyFour(5) // 20/// Implicit capturevar name = \"A\"var appendToName = { (string: String) -&gt; String in    return name.appending(string)}appendToName(\"B\") // ABname = \"C\"appendToName(\"B\") // CB/// Strong/explicit capture with capture listname = \"A\"var appendToCaptureName = { [name] (string: String) -&gt; String in    return name.appending(string)}appendToCaptureName(\"B\") // ABname = \"C\"appendToCaptureName(\"B\") // ABmultiplyTwo and multiplyFour can be used as functions. And the result of multiplyTwo(5) is always 10 because multiplier is in an inner level. On the other hand, variable/property name and the closure of appendToName are on the same level (in the same context). However, if we explicitly capture name by putting it in a capture list [name], the closure will capture the current value of name.Understand different kinds of capturesclass MyClass {}var instance: MyClass? = MyClass()var aClosure = { [instance] in    print(instance)}aClosure() // Optional(__lldb_expr_24.MyClass)instance = nilaClosure() // Optional(__lldb_expr_24.MyClass)The second time we call aClosure it still prints the same instance of MyClass because aClosure holds a strong reference to the instance. Because we strongly captured the property instance, the closure owns this property. For value types like structs and enums, this means that the closure copies the current value of an object over to its own area in memory where it owns the object. For a class, the closure will maintain a strong pointer reference to the object.class MyClass {}var instance: MyClass? = MyClass()var aClosure = { [weak instance] in    print(instance)}aClosure() // Optional(__lldb_expr_26.MyClass)instance = nilaClosure() // nilIf we explicitly declare the property as a weak capture in the capture list, the system doesn’t count our closure’s reference to instance which means that as soon as the playground releases its reference to our instance of MyClass it can be deallocated.class MyClass {}var instance: MyClass? = MyClass()var aClosure = { [unowned instance] in    print(instance)}aClosure() // Optional(__lldb_expr_28.MyClass)instance = nilaClosure() // Fatal error: Attempted to read an unowned reference but object 0x6000002b01d0 was already deallocatedThe impact on memory  for an unowned capture is pretty much the same as weak. But if you want to assert that instance is still around when the closure is called, and want to crash your app if it’s not you can use an unowned reference.SummaryWeak capture is by far the most common capture and it’s usually a good default one to prevent retained cycle and memory leaks. So if you have [weak self] in your capture list, make sure to unwrap self in your closure body using guard strongSelf = self else { return } to make sure that self exists by the time the closure is executed.",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>weak self</li>  <li>capture list</li>  <li>strong capture</li>  <li>weak capture</li>  <li>implicit capture</li>  <li>owned capture</li>  <li>retained cycle/reference</li>  <li>memory leak</li></ul><h3 id=\"understand-what-a-capture-list-is\">Understand what a capture list is</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">UIKit</span><span class=\"kd\">func</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"n\">by</span> <span class=\"nv\">multiplier</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">((</span><span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"k\">in</span>        <span class=\"k\">return</span> <span class=\"n\">input</span> <span class=\"o\">*</span> <span class=\"n\">multiplier</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"k\">var</span> <span class=\"nv\">multiplier</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"k\">let</span> <span class=\"nv\">multiplyTwo</span> <span class=\"o\">=</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"n\">multiplier</span><span class=\"p\">)</span><span class=\"nf\">multiplyTwo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\">// 10</span><span class=\"n\">multiplier</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"nf\">multiplyTwo</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\">// 10</span><span class=\"n\">multiplier</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"k\">let</span> <span class=\"nv\">multiplyFour</span> <span class=\"o\">=</span> <span class=\"nf\">multiply</span><span class=\"p\">(</span><span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"n\">multiplier</span><span class=\"p\">)</span><span class=\"nf\">multiplyFour</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"c1\">// 20</span><span class=\"c1\">/// Implicit capture</span><span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"A\"</span><span class=\"k\">var</span> <span class=\"nv\">appendToName</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"k\">in</span>    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"nf\">appending</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"nf\">appendToName</span><span class=\"p\">(</span><span class=\"s\">\"B\"</span><span class=\"p\">)</span> <span class=\"c1\">// AB</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"C\"</span><span class=\"nf\">appendToName</span><span class=\"p\">(</span><span class=\"s\">\"B\"</span><span class=\"p\">)</span> <span class=\"c1\">// CB</span><span class=\"c1\">/// Strong/explicit capture with capture list</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"A\"</span><span class=\"k\">var</span> <span class=\"nv\">appendToCaptureName</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"k\">in</span>    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"nf\">appending</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"nf\">appendToCaptureName</span><span class=\"p\">(</span><span class=\"s\">\"B\"</span><span class=\"p\">)</span> <span class=\"c1\">// AB</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"C\"</span><span class=\"nf\">appendToCaptureName</span><span class=\"p\">(</span><span class=\"s\">\"B\"</span><span class=\"p\">)</span> <span class=\"c1\">// AB</span></code></pre></div></div><p><code class=\"highlighter-rouge\">multiplyTwo</code> and <code class=\"highlighter-rouge\">multiplyFour</code> can be used as functions. And the result of <code class=\"highlighter-rouge\">multiplyTwo(5)</code> is always <strong>10</strong> because multiplier is in an inner level. On the other hand, variable/property <code class=\"highlighter-rouge\">name</code> and the closure of <code class=\"highlighter-rouge\">appendToName</code> are on the same level (in the same context). However, if we explicitly capture <code class=\"highlighter-rouge\">name</code> by putting it in a capture list <code class=\"highlighter-rouge\">[name]</code>, the closure will capture the current value of <code class=\"highlighter-rouge\">name</code>.</p><h3 id=\"understand-different-kinds-of-captures\">Understand different kinds of captures</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">MyClass</span> <span class=\"p\">{}</span><span class=\"k\">var</span> <span class=\"nv\">instance</span><span class=\"p\">:</span> <span class=\"kt\">MyClass</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kt\">MyClass</span><span class=\"p\">()</span><span class=\"k\">var</span> <span class=\"nv\">aClosure</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"n\">instance</span><span class=\"p\">]</span> <span class=\"k\">in</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"nf\">aClosure</span><span class=\"p\">()</span> <span class=\"c1\">// Optional(__lldb_expr_24.MyClass)</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"nf\">aClosure</span><span class=\"p\">()</span> <span class=\"c1\">// Optional(__lldb_expr_24.MyClass)</span></code></pre></div></div><p>The second time we call <code class=\"highlighter-rouge\">aClosure</code> it still prints the same instance of <code class=\"highlighter-rouge\">MyClass</code> because <code class=\"highlighter-rouge\">aClosure</code> holds a strong reference to the instance. Because we strongly captured the property <code class=\"highlighter-rouge\">instance</code>, the closure owns this property. For value types like structs and enums, this means that the closure copies the current value of an object over to its own area in memory where it owns the object. For a class, the closure will maintain a strong pointer reference to the object.</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">MyClass</span> <span class=\"p\">{}</span><span class=\"k\">var</span> <span class=\"nv\">instance</span><span class=\"p\">:</span> <span class=\"kt\">MyClass</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kt\">MyClass</span><span class=\"p\">()</span><span class=\"k\">var</span> <span class=\"nv\">aClosure</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">weak</span> <span class=\"n\">instance</span><span class=\"p\">]</span> <span class=\"k\">in</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"nf\">aClosure</span><span class=\"p\">()</span> <span class=\"c1\">// Optional(__lldb_expr_26.MyClass)</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"nf\">aClosure</span><span class=\"p\">()</span> <span class=\"c1\">// nil</span></code></pre></div></div><p>If we explicitly declare the property as a weak capture in the capture list, the system doesn’t count our closure’s reference to <code class=\"highlighter-rouge\">instance</code> which means that as soon as the playground releases its reference to our instance of <code class=\"highlighter-rouge\">MyClass</code> it can be deallocated.</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">MyClass</span> <span class=\"p\">{}</span><span class=\"k\">var</span> <span class=\"nv\">instance</span><span class=\"p\">:</span> <span class=\"kt\">MyClass</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kt\">MyClass</span><span class=\"p\">()</span><span class=\"k\">var</span> <span class=\"nv\">aClosure</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">unowned</span> <span class=\"n\">instance</span><span class=\"p\">]</span> <span class=\"k\">in</span>    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"p\">}</span><span class=\"nf\">aClosure</span><span class=\"p\">()</span> <span class=\"c1\">// Optional(__lldb_expr_28.MyClass)</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"nf\">aClosure</span><span class=\"p\">()</span> <span class=\"c1\">// Fatal error: Attempted to read an unowned reference but object 0x6000002b01d0 was already deallocated</span></code></pre></div></div><p>The impact on memory  for an <code class=\"highlighter-rouge\">unowned</code> capture is pretty much the same as <code class=\"highlighter-rouge\">weak</code>. But if you want to assert that <code class=\"highlighter-rouge\">instance</code> is still around when the closure is called, and want to crash your app if it’s not you can use an <code class=\"highlighter-rouge\">unowned</code> reference.</p><h3 id=\"summary\">Summary</h3><p>Weak capture is by far the most common capture and it’s usually a good default one to prevent retained cycle and memory leaks. So if you have <code class=\"highlighter-rouge\">[weak self]</code> in your capture list, make sure to unwrap <code class=\"highlighter-rouge\">self</code> in your closure body using <code class=\"highlighter-rouge\">guard strongSelf = self else { return }</code> to make sure that <code class=\"highlighter-rouge\">self</code> exists by the time the closure is executed.</p>",
            "url": "http://localhost:4000/swift/WeakSelf",
            
            
            
            "tags": ["swift","future","promise"],
            
            "date_published": "2020-12-21T00:00:00-05:00",
            "date_modified": "2020-12-21T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/HotProspects",
            "title": "HotProspects",
            "summary": "Build an app for conferences with tabs, context menus, and more.",
            "content_text": "Keywords  tabview  Result  objectWillChange  QR code  notification  package import  context view  image interpolation  fileprivate  UserDefaults  encapsulationKeynotes      It’s common to use NavigationView and TabView at the same time. And TabView should be the parent view, with the tabs inside it having a NavigationView as necessary, not the other way around.        Ask user for permission to user the camera:    Open info.plist  Right-click in some space and select Add Row  Select “Privacy - Camera Usage Description” for the key  For the value enter “We need to scan QR codes”      Properties wrapped in @EnvironmentObject must have a value before the view is shown        @EnvironmentObject properties must conform to ObservableObject. They use exactly the same protocol, which means @Published and more works        We can add one image and one text view to each tab bar item        swiftUI enables high-quality interpolation by default. We can control interpolation using the interpolation modifier  Codes// Result Type exampleimport SwiftUIenum NetworkError: Error {    case badURL, requestFailed, unknown}func fetchData(from urlString: String, completion: @escaping (Result&lt;String, NetworkError&gt;) -&gt; Void) {    guard let url = URL(string: urlString) else {        completion(.failure(.badURL))        return    }        URLSession.shared.dataTask(with: url) { data, response, error in        DispatchQueue.main.async {            if let data = data {                let stringData = String(decoding: data, as: UTF8.self)                completion(.success(stringData))            } else if error != nil {                completion(.failure(.requestFailed))            } else {                completion(.failure(.unknown))            }        }    }.resume()}struct ContentView: View {    @State private var selectedTab = 0        var body: some View {        Text(\"Hello, World!\")            .onAppear {                fetchData(from: \"https://www.apple.com\", completion: { result in                    switch result {                    case .success(let str):                        print(str)                    case .failure(let error):                        switch error {                        case .badURL:                            print(\"Bad URL\")                        case .requestFailed:                            print(\"Network problems\")                        case .unknown:                            print(\"Unknown issue\")                        }                    }                })            }    }}////  ContentView.swift//  HotProspects////import SwiftUIstruct ContentView: View {    var prospects = Prospects()        var body: some View {        TabView {            ProspectsView(filter: .none)                .tabItem {                    Image(systemName: \"person.3\")                    Text(\"Everyone\")                }            ProspectsView(filter: .contacted)                .tabItem {                    Image(systemName: \"checkmark.circle\")                    Text(\"Contacted\")                }            ProspectsView(filter: .uncontacted)                .tabItem {                    Image(systemName: \"questionmark.diamond\")                    Text(\"Uncontacted\")                }            MeView()                .tabItem {                    Image(systemName: \"person.crop.square\")                    Text(\"Me\")                }                    }        .environmentObject(prospects)    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  ProspectsView.swift//  HotProspects////import SwiftUIimport CodeScannerimport UserNotificationsstruct ProspectsView: View {    enum FilterType {        case none, contacted, uncontacted    }    let filter: FilterType    var filteredProspects: [Prospect] {        switch filter {        case .none:            return prospects.people        case .contacted:            return prospects.people.filter { $0.isContacted }        case .uncontacted:            return prospects.people.filter({ !$0.isContacted })        }    }    var title: String {        switch filter {        case .none:            return \"Everyone\"        case .contacted:            return \"Contacted people\"        case .uncontacted:            return \"Uncontacted people\"        }    }    @EnvironmentObject var prospects: Prospects    @State private var isShowingScanner = false        var body: some View {        NavigationView {            List {                ForEach(filteredProspects) { prospect in                    VStack(alignment: .leading, spacing: nil, content: {                        Text(prospect.name)                            .font(.headline)                        Text(prospect.emailAddress)                            .foregroundColor(.secondary)                    })                    .contextMenu {                        Button(prospect.isContacted ? \"Mark Uncontacted\" : \"Mark Contacted\") {                            self.prospects.toggle(prospect)                        }                        if !prospect.isContacted {                            Button(\"Remind Me\") {                                self.addNotification(for: prospect)                            }                        }                    }                }            }            .navigationBarTitle(title)            .navigationBarItems(trailing: Button(action: {                self.isShowingScanner = true            }) {                Image(systemName: \"qrcode.viewfinder\")                Text(\"Scan\")            })            .sheet(isPresented: $isShowingScanner, content: {                CodeScannerView(codeTypes: [.qr], simulatedData: \"Paul Hudson\\npaul@hackingwithswift.com\", completion: self.handleScan)            })                    }    }        func handleScan(result: Result&lt;String, CodeScannerView.ScanError&gt;) {        self.isShowingScanner = false                switch result {        case .success(let code):            let details = code.components(separatedBy: \"\\n\")            guard details.count == 2 else { return }                        let person = Prospect()            person.name = details[0]            person.emailAddress = details[1]                        self.prospects.add(person)                    case.failure(let error):            print(\"Scanning failed\")        }    }        func addNotification(for prospect: Prospect) {        let center = UNUserNotificationCenter.current()        let addRequest = {            let content = UNMutableNotificationContent()            content.title = \"Contact \\(prospect.name)\"            content.subtitle = prospect.emailAddress            content.sound = UNNotificationSound.default            var dateComponents = DateComponents()            dateComponents.hour = 9//            let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)            let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)            let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)            center.add(request)        }        center.getNotificationSettings { settings in            if settings.authorizationStatus == .authorized {                addRequest()            } else {                center.requestAuthorization(options: [.alert, .badge, .sound]) { success, error in                    if success {                        addRequest()                    } else {                        print(\"D'oh\")                    }                }            }        }    }}struct ProspectsView_Previews: PreviewProvider {    static var previews: some View {        ProspectsView(filter: .none).environmentObject(Prospects())    }}////  MeView.swift//  HotProspects////import SwiftUIimport CoreImage.CIFilterBuiltinsstruct MeView: View {    @State private var name = \"Anonymous\"    @State private var emailAddress = \"you@yoursite.com\"        let context = CIContext()    let filter = CIFilter.qrCodeGenerator()        var body: some View {        NavigationView {            VStack {                TextField(\"Name\", text: $name)                    .textContentType(.name)                    .font(.title)                    .padding(.horizontal)                TextField(\"Email address\", text: $emailAddress)                    .textContentType(.emailAddress)                    .font(.title)                    .padding([.horizontal, .bottom])                                Image(uiImage: generateQRCode(from: \"\\(name)\\n\\(emailAddress)\"))                    .interpolation(.none)                    .resizable()                    .scaledToFit()                    .frame(width: 200, height: 200)                Spacer()            }            .navigationBarTitle(\"Your code\")        }    }        func generateQRCode(from string: String) -&gt; UIImage {        let data = Data(string.utf8)        filter.setValue(data, forKey: \"inputMessage\")        if let outputImage = filter.outputImage {            if let cgimg = context.createCGImage(outputImage, from: outputImage.extent) {                return UIImage(cgImage: cgimg)            }        }        return UIImage(systemName: \"xmark.circle\") ?? UIImage()    }}struct MeView_Previews: PreviewProvider {    static var previews: some View {        MeView()    }}////  Prospect.swift//  HotProspects////import Foundationclass Prospect: Identifiable, Codable {    let id = UUID()    var name = \"Anonymous\"    var emailAddress = \"\"    fileprivate(set) var isContacted = false}class Prospects: ObservableObject {    static let saveKey = \"SavedData\"        @Published private(set) var people: [Prospect]        init() {        if let data = UserDefaults.standard.data(forKey: Self.saveKey) {            if let decoded = try? JSONDecoder().decode([Prospect].self, from: data) {                self.people = decoded                return            }        }                self.people = []    }        private func save() {        if let encoded = try? JSONEncoder().encode(people) {            UserDefaults.standard.setValue(encoded, forKey: Self.saveKey)        }    }        func add(_ prospect: Prospect) {        people.append(prospect)        save()    }        func toggle(_ prospect: Prospect) {        objectWillChange.send()        prospect.isContacted.toggle()        save()    }}",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>tabview</li>  <li>Result</li>  <li>objectWillChange</li>  <li>QR code</li>  <li>notification</li>  <li>package import</li>  <li>context view</li>  <li>image interpolation</li>  <li>fileprivate</li>  <li>UserDefaults</li>  <li>encapsulation</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li>    <p>It’s common to use <code class=\"highlighter-rouge\">NavigationView</code> and <code class=\"highlighter-rouge\">TabView</code> at the same time. And <code class=\"highlighter-rouge\">TabView</code> should be the parent view, with the tabs inside it having a <code class=\"highlighter-rouge\">NavigationView</code> as necessary, not the other way around.</p>  </li>  <li>    <p>Ask user for permission to user the camera:</p>  </li></ol><ul>  <li>Open info.plist</li>  <li>Right-click in some space and select Add Row</li>  <li>Select “Privacy - Camera Usage Description” for the key</li>  <li>For the value enter “We need to scan QR codes”</li></ul><ol>  <li>    <p>Properties wrapped in <code class=\"highlighter-rouge\">@EnvironmentObject</code> must have a value before the view is shown</p>  </li>  <li>    <p><code class=\"highlighter-rouge\">@EnvironmentObject</code> properties must conform to <code class=\"highlighter-rouge\">ObservableObject</code>. They use exactly the same protocol, which means <code class=\"highlighter-rouge\">@Published</code> and more works</p>  </li>  <li>    <p>We can add one image and one text view to each tab bar item</p>  </li>  <li>    <p>swiftUI enables high-quality interpolation by default. We can control interpolation using the interpolation modifier</p>  </li></ol><h3 id=\"codes\">Codes</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Result Type example</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">enum</span> <span class=\"kt\">NetworkError</span><span class=\"p\">:</span> <span class=\"kt\">Error</span> <span class=\"p\">{</span>    <span class=\"k\">case</span> <span class=\"n\">badURL</span><span class=\"p\">,</span> <span class=\"n\">requestFailed</span><span class=\"p\">,</span> <span class=\"n\">unknown</span><span class=\"p\">}</span><span class=\"kd\">func</span> <span class=\"nf\">fetchData</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">urlString</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">NetworkError</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"n\">urlString</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>        <span class=\"nf\">completion</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">badURL</span><span class=\"p\">))</span>        <span class=\"k\">return</span>    <span class=\"p\">}</span>        <span class=\"kt\">URLSession</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"nf\">dataTask</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"k\">in</span>        <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"p\">{</span>                <span class=\"k\">let</span> <span class=\"nv\">stringData</span> <span class=\"o\">=</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"nv\">decoding</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nv\">as</span><span class=\"p\">:</span> <span class=\"kt\">UTF8</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>                <span class=\"nf\">completion</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">stringData</span><span class=\"p\">))</span>            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>                <span class=\"nf\">completion</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">requestFailed</span><span class=\"p\">))</span>            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                <span class=\"nf\">completion</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">unknown</span><span class=\"p\">))</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">resume</span><span class=\"p\">()</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">selectedTab</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"n\">onAppear</span> <span class=\"p\">{</span>                <span class=\"nf\">fetchData</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"s\">\"https://www.apple.com\"</span><span class=\"p\">,</span> <span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"k\">in</span>                    <span class=\"k\">switch</span> <span class=\"n\">result</span> <span class=\"p\">{</span>                    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">str</span><span class=\"p\">):</span>                        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">)</span>                    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">error</span><span class=\"p\">):</span>                        <span class=\"k\">switch</span> <span class=\"n\">error</span> <span class=\"p\">{</span>                        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">badURL</span><span class=\"p\">:</span>                            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Bad URL\"</span><span class=\"p\">)</span>                        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">requestFailed</span><span class=\"p\">:</span>                            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Network problems\"</span><span class=\"p\">)</span>                        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">unknown</span><span class=\"p\">:</span>                            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Unknown issue\"</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                    <span class=\"p\">}</span>                <span class=\"p\">})</span>            <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  HotProspects</span><span class=\"c1\">//</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">var</span> <span class=\"nv\">prospects</span> <span class=\"o\">=</span> <span class=\"kt\">Prospects</span><span class=\"p\">()</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">TabView</span> <span class=\"p\">{</span>            <span class=\"kt\">ProspectsView</span><span class=\"p\">(</span><span class=\"nv\">filter</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"k\">none</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"n\">tabItem</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"person.3\"</span><span class=\"p\">)</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Everyone\"</span><span class=\"p\">)</span>                <span class=\"p\">}</span>            <span class=\"kt\">ProspectsView</span><span class=\"p\">(</span><span class=\"nv\">filter</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">contacted</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"n\">tabItem</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"checkmark.circle\"</span><span class=\"p\">)</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Contacted\"</span><span class=\"p\">)</span>                <span class=\"p\">}</span>            <span class=\"kt\">ProspectsView</span><span class=\"p\">(</span><span class=\"nv\">filter</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">uncontacted</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"n\">tabItem</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"questionmark.diamond\"</span><span class=\"p\">)</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Uncontacted\"</span><span class=\"p\">)</span>                <span class=\"p\">}</span>            <span class=\"kt\">MeView</span><span class=\"p\">()</span>                <span class=\"o\">.</span><span class=\"n\">tabItem</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"person.crop.square\"</span><span class=\"p\">)</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Me\"</span><span class=\"p\">)</span>                <span class=\"p\">}</span>                    <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">environmentObject</span><span class=\"p\">(</span><span class=\"n\">prospects</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ProspectsView.swift</span><span class=\"c1\">//  HotProspects</span><span class=\"c1\">//</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CodeScanner</span><span class=\"kd\">import</span> <span class=\"kt\">UserNotifications</span><span class=\"kd\">struct</span> <span class=\"kt\">ProspectsView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">enum</span> <span class=\"kt\">FilterType</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"k\">none</span><span class=\"p\">,</span> <span class=\"n\">contacted</span><span class=\"p\">,</span> <span class=\"n\">uncontacted</span>    <span class=\"p\">}</span>    <span class=\"k\">let</span> <span class=\"nv\">filter</span><span class=\"p\">:</span> <span class=\"kt\">FilterType</span>    <span class=\"k\">var</span> <span class=\"nv\">filteredProspects</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Prospect</span><span class=\"p\">]</span> <span class=\"p\">{</span>        <span class=\"k\">switch</span> <span class=\"n\">filter</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">none</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">prospects</span><span class=\"o\">.</span><span class=\"n\">people</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">contacted</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">prospects</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">isContacted</span> <span class=\"p\">}</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">uncontacted</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"n\">prospects</span><span class=\"o\">.</span><span class=\"n\">people</span><span class=\"o\">.</span><span class=\"nf\">filter</span><span class=\"p\">({</span> <span class=\"o\">!</span><span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">isContacted</span> <span class=\"p\">})</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"k\">var</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>        <span class=\"k\">switch</span> <span class=\"n\">filter</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">none</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"s\">\"Everyone\"</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">contacted</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"s\">\"Contacted people\"</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">uncontacted</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"s\">\"Uncontacted people\"</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"kd\">@EnvironmentObject</span> <span class=\"k\">var</span> <span class=\"nv\">prospects</span><span class=\"p\">:</span> <span class=\"kt\">Prospects</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">isShowingScanner</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">List</span> <span class=\"p\">{</span>                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">filteredProspects</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">prospect</span> <span class=\"k\">in</span>                    <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">,</span> <span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>                            <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">emailAddress</span><span class=\"p\">)</span>                            <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>                    <span class=\"p\">})</span>                    <span class=\"o\">.</span><span class=\"n\">contextMenu</span> <span class=\"p\">{</span>                        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">isContacted</span> <span class=\"p\">?</span> <span class=\"s\">\"Mark Uncontacted\"</span> <span class=\"p\">:</span> <span class=\"s\">\"Mark Contacted\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">prospects</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">(</span><span class=\"n\">prospect</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                        <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">isContacted</span> <span class=\"p\">{</span>                            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Remind Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">addNotification</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">prospect</span><span class=\"p\">)</span>                            <span class=\"p\">}</span>                        <span class=\"p\">}</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span><span class=\"nv\">trailing</span><span class=\"p\">:</span> <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowingScanner</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>            <span class=\"p\">})</span> <span class=\"p\">{</span>                <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"qrcode.viewfinder\"</span><span class=\"p\">)</span>                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Scan\"</span><span class=\"p\">)</span>            <span class=\"p\">})</span>            <span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">isShowingScanner</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"kt\">CodeScannerView</span><span class=\"p\">(</span><span class=\"nv\">codeTypes</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">qr</span><span class=\"p\">],</span> <span class=\"nv\">simulatedData</span><span class=\"p\">:</span> <span class=\"s\">\"Paul Hudson</span><span class=\"se\">\\n</span><span class=\"s\">paul@hackingwithswift.com\"</span><span class=\"p\">,</span> <span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">handleScan</span><span class=\"p\">)</span>            <span class=\"p\">})</span>                    <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">handleScan</span><span class=\"p\">(</span><span class=\"nv\">result</span><span class=\"p\">:</span> <span class=\"kt\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">CodeScannerView</span><span class=\"o\">.</span><span class=\"kt\">ScanError</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowingScanner</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>                <span class=\"k\">switch</span> <span class=\"n\">result</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">code</span><span class=\"p\">):</span>            <span class=\"k\">let</span> <span class=\"nv\">details</span> <span class=\"o\">=</span> <span class=\"n\">code</span><span class=\"o\">.</span><span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"nv\">separatedBy</span><span class=\"p\">:</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>            <span class=\"k\">guard</span> <span class=\"n\">details</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>                        <span class=\"k\">let</span> <span class=\"nv\">person</span> <span class=\"o\">=</span> <span class=\"kt\">Prospect</span><span class=\"p\">()</span>            <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">details</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>            <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">emailAddress</span> <span class=\"o\">=</span> <span class=\"n\">details</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>                        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">prospects</span><span class=\"o\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>                    <span class=\"k\">case</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">error</span><span class=\"p\">):</span>            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Scanning failed\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">addNotification</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">prospect</span><span class=\"p\">:</span> <span class=\"kt\">Prospect</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">center</span> <span class=\"o\">=</span> <span class=\"kt\">UNUserNotificationCenter</span><span class=\"o\">.</span><span class=\"nf\">current</span><span class=\"p\">()</span>        <span class=\"k\">let</span> <span class=\"nv\">addRequest</span> <span class=\"o\">=</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">content</span> <span class=\"o\">=</span> <span class=\"kt\">UNMutableNotificationContent</span><span class=\"p\">()</span>            <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"Contact </span><span class=\"se\">\\(</span><span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"se\">)</span><span class=\"s\">\"</span>            <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">emailAddress</span>            <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">sound</span> <span class=\"o\">=</span> <span class=\"kt\">UNNotificationSound</span><span class=\"o\">.</span><span class=\"k\">default</span>            <span class=\"k\">var</span> <span class=\"nv\">dateComponents</span> <span class=\"o\">=</span> <span class=\"kt\">DateComponents</span><span class=\"p\">()</span>            <span class=\"n\">dateComponents</span><span class=\"o\">.</span><span class=\"n\">hour</span> <span class=\"o\">=</span> <span class=\"mi\">9</span><span class=\"c1\">//            let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: false)</span>            <span class=\"k\">let</span> <span class=\"nv\">trigger</span> <span class=\"o\">=</span> <span class=\"kt\">UNTimeIntervalNotificationTrigger</span><span class=\"p\">(</span><span class=\"nv\">timeInterval</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nv\">repeats</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>            <span class=\"k\">let</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">UNNotificationRequest</span><span class=\"p\">(</span><span class=\"nv\">identifier</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">uuidString</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"nv\">trigger</span><span class=\"p\">:</span> <span class=\"n\">trigger</span><span class=\"p\">)</span>            <span class=\"n\">center</span><span class=\"o\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>        <span class=\"p\">}</span>        <span class=\"n\">center</span><span class=\"o\">.</span><span class=\"n\">getNotificationSettings</span> <span class=\"p\">{</span> <span class=\"n\">settings</span> <span class=\"k\">in</span>            <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">authorizationStatus</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">authorized</span> <span class=\"p\">{</span>                <span class=\"nf\">addRequest</span><span class=\"p\">()</span>            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                <span class=\"n\">center</span><span class=\"o\">.</span><span class=\"nf\">requestAuthorization</span><span class=\"p\">(</span><span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">alert</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">badge</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">sound</span><span class=\"p\">])</span> <span class=\"p\">{</span> <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"k\">in</span>                    <span class=\"k\">if</span> <span class=\"n\">success</span> <span class=\"p\">{</span>                        <span class=\"nf\">addRequest</span><span class=\"p\">()</span>                    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"D'oh\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ProspectsView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ProspectsView</span><span class=\"p\">(</span><span class=\"nv\">filter</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"k\">none</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">environmentObject</span><span class=\"p\">(</span><span class=\"kt\">Prospects</span><span class=\"p\">())</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  MeView.swift</span><span class=\"c1\">//  HotProspects</span><span class=\"c1\">//</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CoreImage</span><span class=\"o\">.</span><span class=\"kt\">CIFilterBuiltins</span><span class=\"kd\">struct</span> <span class=\"kt\">MeView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Anonymous\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">emailAddress</span> <span class=\"o\">=</span> <span class=\"s\">\"you@yoursite.com\"</span>        <span class=\"k\">let</span> <span class=\"nv\">context</span> <span class=\"o\">=</span> <span class=\"kt\">CIContext</span><span class=\"p\">()</span>    <span class=\"k\">let</span> <span class=\"nv\">filter</span> <span class=\"o\">=</span> <span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">qrCodeGenerator</span><span class=\"p\">()</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">VStack</span> <span class=\"p\">{</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Name\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">name</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">textContentType</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">)</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Email address\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">emailAddress</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">textContentType</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">emailAddress</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">([</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">bottom</span><span class=\"p\">])</span>                                <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">uiImage</span><span class=\"p\">:</span> <span class=\"nf\">generateQRCode</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">name</span><span class=\"se\">)\\n\\(</span><span class=\"n\">emailAddress</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">))</span>                    <span class=\"o\">.</span><span class=\"nf\">interpolation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"k\">none</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                    <span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>                    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">)</span>                <span class=\"kt\">Spacer</span><span class=\"p\">()</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Your code\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">generateQRCode</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImage</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"kt\">Data</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">utf8</span><span class=\"p\">)</span>        <span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"inputMessage\"</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">outputImage</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"n\">outputImage</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">cgimg</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"nf\">createCGImage</span><span class=\"p\">(</span><span class=\"n\">outputImage</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">outputImage</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">return</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">cgImage</span><span class=\"p\">:</span> <span class=\"n\">cgimg</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"xmark.circle\"</span><span class=\"p\">)</span> <span class=\"p\">??</span> <span class=\"kt\">UIImage</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">MeView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">MeView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  Prospect.swift</span><span class=\"c1\">//  HotProspects</span><span class=\"c1\">//</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span><span class=\"kd\">class</span> <span class=\"kt\">Prospect</span><span class=\"p\">:</span> <span class=\"kt\">Identifiable</span><span class=\"p\">,</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"kt\">UUID</span><span class=\"p\">()</span>    <span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Anonymous\"</span>    <span class=\"k\">var</span> <span class=\"nv\">emailAddress</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"nf\">fileprivate</span><span class=\"p\">(</span><span class=\"k\">set</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">isContacted</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"kt\">Prospects</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">saveKey</span> <span class=\"o\">=</span> <span class=\"s\">\"SavedData\"</span>        <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">people</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Prospect</span><span class=\"p\">]</span>        <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">saveKey</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">decoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">([</span><span class=\"kt\">Prospect</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"n\">decoded</span>                <span class=\"k\">return</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"p\">}</span>        <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">save</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">encoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">saveKey</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">prospect</span><span class=\"p\">:</span> <span class=\"kt\">Prospect</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">people</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">prospect</span><span class=\"p\">)</span>        <span class=\"nf\">save</span><span class=\"p\">()</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">toggle</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">prospect</span><span class=\"p\">:</span> <span class=\"kt\">Prospect</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">objectWillChange</span><span class=\"o\">.</span><span class=\"nf\">send</span><span class=\"p\">()</span>        <span class=\"n\">prospect</span><span class=\"o\">.</span><span class=\"n\">isContacted</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>        <span class=\"nf\">save</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/HotProspects",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-12-06T00:00:00-05:00",
            "date_modified": "2020-12-06T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/python/UnderscoresInPython",
            "title": "Underscores in Python",
            "summary": "Underscores in Python.",
            "content_text": "Keywords: Leading/Trailing Underscore, Name ManglingDouble Underscore Name Mangling: __varPython has no privacy model and there are no truly protected or private attributes. Names with a leading double-underscore and no trailing double underscore are mangled to protected them from clash when inheritedDocument on Identifiers (Names)  Private name mangling: When an identifier that textually occurs in a class definition begins with two or more underscore characters and does not end in two or more underscores, it is considered a private name of that class. Private names are transformed to a longer form before code is generated for them. The transformation inserts the class name, with leading underscores removed and a single underscore inserted, in front of the name. For example, the identifier __spam occurring in a class named Ham will be transformed to _Ham__spam. This transformation is independent of the syntactical context in which the identifier is used.class Parent(object):    def _protected(self):        pass    def __private(self):        passclass Child(Parent):    def foo(self):        self._protected()    def bar(self):        self._Parent__private()We can look at the attributes on the Parent object with the built-in dir() function:&gt;&gt;&gt; p = Parent()&gt;&gt;&gt; dir(p)['_Parent__private', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__','__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__','__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__','__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__','__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_protected']Single Leading Underscore: _var# my_module.pydef external_func():    return \"external_func\"def _internal_func():    return \"internal_func\"If we import with wildcard, Python will skip names with a leading underscore (unless the module defines an __all__ list that overrides this behavior):&gt;&gt;&gt; from my_module import *&gt;&gt;&gt; external_func()external_func&gt;&gt;&gt; _internal_func()NameError: \"name '_internal_func' is not defined\"However, regular imports are not affected by the leading single underscore naming convention:&gt;&gt;&gt; import my_module&gt;&gt;&gt; my_module.external_func()external_func&gt;&gt;&gt; my_module._internal_func()internal_funcSingle Trailing Underscore: var_If the name is already taken by a Python keyword, then we can append a single underscore to break the naming conflict:&gt;&gt;&gt; def func(class):SyntaxError: \"invalid syntax\"&gt;&gt;&gt; def func(class_):...     pass",
            "content_html": "<h4 id=\"keywords-leadingtrailing-underscore-name-mangling\">Keywords: Leading/Trailing Underscore, Name Mangling</h4><h3 id=\"double-underscore-name-mangling-__var\">Double Underscore Name Mangling: __var</h3><p>Python has no privacy model and there are no truly <code class=\"highlighter-rouge\">protected</code> or <code class=\"highlighter-rouge\">private</code> attributes. Names with a leading double-underscore and no trailing double underscore are mangled to protected them from clash when inherited</p><p><a href=\"https://docs.python.org/3.6/reference/expressions.html#atom-identifiers\">Document on Identifiers (Names)</a></p><blockquote>  <p><strong>Private name mangling</strong>: When an identifier that textually occurs in a class definition begins with two or more underscore characters and does not end in two or more underscores, it is considered a private name of that class. Private names are transformed to a longer form before code is generated for them. The transformation inserts the class name, with leading underscores removed and a single underscore inserted, in front of the name. For example, the identifier <code class=\"highlighter-rouge\">__spam</code> occurring in a class named <code class=\"highlighter-rouge\">Ham</code> will be transformed to <code class=\"highlighter-rouge\">_Ham__spam</code>. This transformation is independent of the syntactical context in which the identifier is used.</p></blockquote><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">class</span> <span class=\"nc\">Parent</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">_protected</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">pass</span>    <span class=\"k\">def</span> <span class=\"nf\">__private</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"k\">pass</span><span class=\"k\">class</span> <span class=\"nc\">Child</span><span class=\"p\">(</span><span class=\"n\">Parent</span><span class=\"p\">):</span>    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_protected</span><span class=\"p\">()</span>    <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_Parent__private</span><span class=\"p\">()</span></code></pre></div></div><p>We can look at the attributes on the <code class=\"highlighter-rouge\">Parent</code> object with the built-in <code class=\"highlighter-rouge\">dir()</code> function:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Parent</span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"p\">[</span><span class=\"s\">'_Parent__private'</span><span class=\"p\">,</span> <span class=\"s\">'__class__'</span><span class=\"p\">,</span> <span class=\"s\">'__delattr__'</span><span class=\"p\">,</span> <span class=\"s\">'__dict__'</span><span class=\"p\">,</span> <span class=\"s\">'__dir__'</span><span class=\"p\">,</span> <span class=\"s\">'__doc__'</span><span class=\"p\">,</span><span class=\"s\">'__eq__'</span><span class=\"p\">,</span> <span class=\"s\">'__format__'</span><span class=\"p\">,</span> <span class=\"s\">'__ge__'</span><span class=\"p\">,</span> <span class=\"s\">'__getattribute__'</span><span class=\"p\">,</span> <span class=\"s\">'__gt__'</span><span class=\"p\">,</span> <span class=\"s\">'__hash__'</span><span class=\"p\">,</span><span class=\"s\">'__init__'</span><span class=\"p\">,</span> <span class=\"s\">'__init_subclass__'</span><span class=\"p\">,</span> <span class=\"s\">'__le__'</span><span class=\"p\">,</span> <span class=\"s\">'__lt__'</span><span class=\"p\">,</span> <span class=\"s\">'__module__'</span><span class=\"p\">,</span> <span class=\"s\">'__ne__'</span><span class=\"p\">,</span><span class=\"s\">'__new__'</span><span class=\"p\">,</span> <span class=\"s\">'__reduce__'</span><span class=\"p\">,</span> <span class=\"s\">'__reduce_ex__'</span><span class=\"p\">,</span> <span class=\"s\">'__repr__'</span><span class=\"p\">,</span> <span class=\"s\">'__setattr__'</span><span class=\"p\">,</span><span class=\"s\">'__sizeof__'</span><span class=\"p\">,</span> <span class=\"s\">'__str__'</span><span class=\"p\">,</span> <span class=\"s\">'__subclasshook__'</span><span class=\"p\">,</span> <span class=\"s\">'__weakref__'</span><span class=\"p\">,</span> <span class=\"s\">'_protected'</span><span class=\"p\">]</span></code></pre></div></div><h3 id=\"single-leading-underscore-_var\">Single Leading Underscore: _var</h3><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># my_module.py</span><span class=\"k\">def</span> <span class=\"nf\">external_func</span><span class=\"p\">():</span>    <span class=\"k\">return</span> <span class=\"s\">\"external_func\"</span><span class=\"k\">def</span> <span class=\"nf\">_internal_func</span><span class=\"p\">():</span>    <span class=\"k\">return</span> <span class=\"s\">\"internal_func\"</span></code></pre></div></div><p>If we import with wildcard, Python will skip names with a leading underscore (unless the module defines an <code class=\"highlighter-rouge\">__all__</code> list that overrides this behavior):</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">my_module</span> <span class=\"kn\">import</span> <span class=\"o\">*</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">external_func</span><span class=\"p\">()</span><span class=\"n\">external_func</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">_internal_func</span><span class=\"p\">()</span><span class=\"nb\">NameError</span><span class=\"p\">:</span> <span class=\"s\">\"name '_internal_func' is not defined\"</span></code></pre></div></div><p>However, regular imports are not affected by the leading single underscore naming convention:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">my_module</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_module</span><span class=\"o\">.</span><span class=\"n\">external_func</span><span class=\"p\">()</span><span class=\"n\">external_func</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">my_module</span><span class=\"o\">.</span><span class=\"n\">_internal_func</span><span class=\"p\">()</span><span class=\"n\">internal_func</span></code></pre></div></div><h3 id=\"single-trailing-underscore-var_\">Single Trailing Underscore: var_</h3><p>If the name is already taken by a Python keyword, then we can append a single underscore to break the naming conflict:</p><div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">class</span><span class=\"p\">):</span><span class=\"nb\">SyntaxError</span><span class=\"p\">:</span> <span class=\"s\">\"invalid syntax\"</span><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"p\">):</span><span class=\"o\">...</span>     <span class=\"k\">pass</span></code></pre></div></div>",
            "url": "http://localhost:4000/python/UnderscoresInPython",
            
            
            
            "tags": ["python","underscore","inheritance","name mangling"],
            
            "date_published": "2020-12-01T00:00:00-05:00",
            "date_modified": "2020-12-01T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/BucketList",
            "title": "BucketList",
            "summary": "Embed maps and make network calls in this life goals app",
            "content_text": "Keywords  ComparableKeynotes",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>Comparable</li></ul><h3 id=\"keynotes\">Keynotes</h3>",
            "url": "http://localhost:4000/swiftui/BucketList",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-11-14T00:00:00-05:00",
            "date_modified": "2020-11-14T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/Instafilter",
            "title": "Instafilter",
            "summary": "Learn to link SwiftUI, UIKit, and Core Image in one app",
            "content_text": "Keywords  UIKit  Core Image  UIImage, CGImage, CIImage  ActionSheet  UIImagePickerController  Custom bindingKeynotes  @objc tells Swift to create a method that can be read by Objective-C  We can place optional views directly into a SwiftUI view hierarchy. SwiftUI will only render them if they have a value  When creating a custom Binding, we must specify both get and set closures  Calling UIImageWriteToSavedPhotosAlbum() will fail if the user denied access to their photo library  We cannot detect when an @State property changes using a property observer. We need to use a custom binding instead  Core Image filters take different input keys. Trying to provide a key that isn’t supported will cause a crash  To make a SwiftUI view wrap a UIKit view controller, we must make it confrom to UIViewControllerRepresentalbe (which already conforms to View)  Coordinators act as bridges between SwiftUI’s views and UIKit’s view controllers  The Binding struct is generic. This means we don’t create bindings without further context, but instead say “this is a binding for a string”  Core Image lets us apply graphical filters to an image.It performs the transformation in the GPU, which is what makes it so fast on devicesCode////  ContentView.swift//  Instafilter//import SwiftUIimport CoreImageimport CoreImage.CIFilterBuiltinsstruct ContentView: View {    @State private var image: Image?    @State private var filterIntensity = 0.5    @State private var showingImagePicker = false    @State private var inputImage: UIImage?    @State private var currentFilter: CIFilter = CIFilter.sepiaTone()    @State private var showingFilterSheet = false    @State private var processedImage: UIImage?        let context = CIContext()        var body: some View {        let intensity = Binding&lt;Double&gt;(            get: {                self.filterIntensity            },            set: {                self.filterIntensity = $0                self.applyProcessing()            }        )                return NavigationView {            VStack {                ZStack {                    Rectangle()                        .fill(Color.secondary)                                        /// Display the image.                    if let image = image {                        image                            .resizable()                            .scaledToFit()                    } else {                        Text(\"Tap to select a picture\")                            .foregroundColor(.white)                            .font(.headline)                    }                }                .onTapGesture(count: 1, perform: {                    /// Select an image.                    self.showingImagePicker = true                })                                HStack {                    Text(\"Intensity\")                    Slider(value: intensity)                }                .padding(.vertical)                                HStack {                    Button(\"Change Filter\") {                        /// Change filter.                        self.showingFilterSheet = true                    }                                        Spacer()                                        Button(\"Save\") {                        /// Save the picture.                        guard let processedImage = self.processedImage else { return }                                                let imageSaver = ImageSaver()                        imageSaver.successHandler = {                            print(\"Success!\")                        }                        imageSaver.errorHandler = {                            print(\"Oops: \\($0.localizedDescription)\")                        }                        imageSaver.writeToPhotoAlbum(image: processedImage)                    }                }            }            .padding([.horizontal, .bottom])            .navigationBarTitle(\"Instafilter\")            .sheet(isPresented: $showingImagePicker, onDismiss: loadImage, content: {                ImagePicker(image: self.$inputImage)            })            .actionSheet(isPresented: $showingFilterSheet, content: {                ActionSheet(title: Text(\"Select a filter\"), buttons: [                    .default(Text(\"Crystallize\")) { self.setFilter(CIFilter.crystallize()) },                    .default(Text(\"Edges\")) { self.setFilter(CIFilter.edges()) },                    .default(Text(\"Gaussian Blur\")) { self.setFilter(CIFilter.gaussianBlur()) },                    .default(Text(\"Pixellate\")) { self.setFilter(CIFilter.pixellate()) },                    .default(Text(\"Sepia Tone\")) { self.setFilter(CIFilter.sepiaTone()) },                    .default(Text(\"Unsharp Mask\")) { self.setFilter(CIFilter.unsharpMask()) },                    .default(Text(\"Vignette\")) { self.setFilter(CIFilter.vignette()) },                    .cancel()                ])            })        }    }        func applyProcessing() {        let inputKeys = currentFilter.inputKeys        if inputKeys.contains(kCIInputIntensityKey) { currentFilter.setValue(filterIntensity, forKey: kCIInputIntensityKey) }        if inputKeys.contains(kCIInputRadiusKey) { currentFilter.setValue(filterIntensity * 200, forKey: kCIInputRadiusKey) }        if inputKeys.contains(kCIInputScaleKey) { currentFilter.setValue(filterIntensity * 10, forKey: kCIInputScaleKey) }                guard let outputImage = currentFilter.outputImage else { return }                if let cgimg = context.createCGImage(outputImage, from: outputImage.extent) {            let uiImage = UIImage(cgImage: cgimg)            image = Image(uiImage: uiImage)            processedImage = uiImage        }    }        func loadImage() {        guard let inputImage = inputImage else { return }                let beginImage = CIImage(image: inputImage)        currentFilter.setValue(beginImage, forKey: kCIInputImageKey)        applyProcessing()    }        func setFilter(_ filter: CIFilter) {        currentFilter = filter        loadImage()    }}class ImageSaver: NSObject {    var successHandler: (() -&gt; Void)?    var errorHandler: ((Error) -&gt; Void)?        func writeToPhotoAlbum(image: UIImage) {        UIImageWriteToSavedPhotosAlbum(image, self, #selector(saveError), nil)    }        @objc func saveError(_ image: UIImage, didFinishSavingWithError error: Error?, contextInfo: UnsafeRawPointer) {        if let error = error {            errorHandler?(error)        } else {            successHandler?()        }    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  ImagePicker.swift//  Instafilter//import SwiftUIstruct ImagePicker: UIViewControllerRepresentable {    @Binding var image: UIImage?    @Environment(\\.presentationMode) var presentationMode        class Coordinator: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {        var parent: ImagePicker                init(_ parent: ImagePicker) {            self.parent = parent        }                func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {            if let uiImage = info[.originalImage] as? UIImage {                parent.image = uiImage            }                        parent.presentationMode.wrappedValue.dismiss()        }    }        func makeCoordinator() -&gt; Coordinator {        Coordinator(self)    }        func makeUIViewController(context: Context) -&gt; UIImagePickerController {        let picker = UIImagePickerController()        picker.delegate = context.coordinator        return picker    }        func updateUIViewController(_ uiViewController: UIImagePickerController, context: Context) {            }    }",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>UIKit</li>  <li>Core Image</li>  <li>UIImage, CGImage, CIImage</li>  <li>ActionSheet</li>  <li>UIImagePickerController</li>  <li>Custom binding</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li><code class=\"highlighter-rouge\">@objc</code> tells Swift to create a method that can be read by Objective-C</li>  <li>We can place optional views directly into a SwiftUI view hierarchy. SwiftUI will only render them if they have a value</li>  <li>When creating a custom Binding, we must specify both <code class=\"highlighter-rouge\">get</code> and <code class=\"highlighter-rouge\">set</code> closures</li>  <li>Calling <code class=\"highlighter-rouge\">UIImageWriteToSavedPhotosAlbum()</code> will fail if the user denied access to their photo library</li>  <li>We cannot detect when an <code class=\"highlighter-rouge\">@State</code> property changes using a property observer. We need to use a custom binding instead</li>  <li>Core Image filters take different input keys. Trying to provide a key that isn’t supported will cause a crash</li>  <li>To make a SwiftUI view wrap a UIKit view controller, we must make it confrom to <code class=\"highlighter-rouge\">UIViewControllerRepresentalbe</code> (which already conforms to <code class=\"highlighter-rouge\">View</code>)</li>  <li><code class=\"highlighter-rouge\">Coordinators</code> act as bridges between SwiftUI’s views and UIKit’s view controllers</li>  <li>The Binding struct is generic. This means we don’t create bindings without further context, but instead say “this is a binding for a string”</li>  <li>Core Image lets us apply graphical filters to an image.It performs the transformation in the GPU, which is what makes it so fast on devices</li></ol><h3 id=\"code\">Code</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  Instafilter</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CoreImage</span><span class=\"kd\">import</span> <span class=\"kt\">CoreImage</span><span class=\"o\">.</span><span class=\"kt\">CIFilterBuiltins</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">Image</span><span class=\"p\">?</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">filterIntensity</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingImagePicker</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">inputImage</span><span class=\"p\">:</span> <span class=\"kt\">UIImage</span><span class=\"p\">?</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">currentFilter</span><span class=\"p\">:</span> <span class=\"kt\">CIFilter</span> <span class=\"o\">=</span> <span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">sepiaTone</span><span class=\"p\">()</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingFilterSheet</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">processedImage</span><span class=\"p\">:</span> <span class=\"kt\">UIImage</span><span class=\"p\">?</span>        <span class=\"k\">let</span> <span class=\"nv\">context</span> <span class=\"o\">=</span> <span class=\"kt\">CIContext</span><span class=\"p\">()</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">intensity</span> <span class=\"o\">=</span> <span class=\"kt\">Binding</span><span class=\"o\">&lt;</span><span class=\"kt\">Double</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>            <span class=\"nv\">get</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">filterIntensity</span>            <span class=\"p\">},</span>            <span class=\"nv\">set</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">filterIntensity</span> <span class=\"o\">=</span> <span class=\"nv\">$0</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">applyProcessing</span><span class=\"p\">()</span>            <span class=\"p\">}</span>        <span class=\"p\">)</span>                <span class=\"k\">return</span> <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">VStack</span> <span class=\"p\">{</span>                <span class=\"kt\">ZStack</span> <span class=\"p\">{</span>                    <span class=\"kt\">Rectangle</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>                                        <span class=\"c1\">/// Display the image.</span>                    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">image</span> <span class=\"o\">=</span> <span class=\"n\">image</span> <span class=\"p\">{</span>                        <span class=\"n\">image</span>                            <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                            <span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>                    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Tap to select a picture\"</span><span class=\"p\">)</span>                            <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>                            <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"nf\">onTapGesture</span><span class=\"p\">(</span><span class=\"nv\">count</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">perform</span><span class=\"p\">:</span> <span class=\"p\">{</span>                    <span class=\"c1\">/// Select an image.</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingImagePicker</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                <span class=\"p\">})</span>                                <span class=\"kt\">HStack</span> <span class=\"p\">{</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Intensity\"</span><span class=\"p\">)</span>                    <span class=\"kt\">Slider</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">intensity</span><span class=\"p\">)</span>                <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"p\">)</span>                                <span class=\"kt\">HStack</span> <span class=\"p\">{</span>                    <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Change Filter\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"c1\">/// Change filter.</span>                        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingFilterSheet</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                    <span class=\"p\">}</span>                                        <span class=\"kt\">Spacer</span><span class=\"p\">()</span>                                        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"c1\">/// Save the picture.</span>                        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">processedImage</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">processedImage</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>                                                <span class=\"k\">let</span> <span class=\"nv\">imageSaver</span> <span class=\"o\">=</span> <span class=\"kt\">ImageSaver</span><span class=\"p\">()</span>                        <span class=\"n\">imageSaver</span><span class=\"o\">.</span><span class=\"n\">successHandler</span> <span class=\"o\">=</span> <span class=\"p\">{</span>                            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Success!\"</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                        <span class=\"n\">imageSaver</span><span class=\"o\">.</span><span class=\"n\">errorHandler</span> <span class=\"o\">=</span> <span class=\"p\">{</span>                            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Oops: </span><span class=\"se\">\\(</span><span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                        <span class=\"n\">imageSaver</span><span class=\"o\">.</span><span class=\"nf\">writeToPhotoAlbum</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"n\">processedImage</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">([</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">bottom</span><span class=\"p\">])</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Instafilter\"</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingImagePicker</span><span class=\"p\">,</span> <span class=\"nv\">onDismiss</span><span class=\"p\">:</span> <span class=\"n\">loadImage</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"kt\">ImagePicker</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"err\">$</span><span class=\"n\">inputImage</span><span class=\"p\">)</span>            <span class=\"p\">})</span>            <span class=\"o\">.</span><span class=\"nf\">actionSheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingFilterSheet</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"kt\">ActionSheet</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Select a filter\"</span><span class=\"p\">),</span> <span class=\"nv\">buttons</span><span class=\"p\">:</span> <span class=\"p\">[</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Crystallize\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">crystallize</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Edges\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">edges</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Gaussian Blur\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">gaussianBlur</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Pixellate\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">pixellate</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Sepia Tone\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">sepiaTone</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Unsharp Mask\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">unsharpMask</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Vignette\"</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"kt\">CIFilter</span><span class=\"o\">.</span><span class=\"nf\">vignette</span><span class=\"p\">())</span> <span class=\"p\">},</span>                    <span class=\"o\">.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>                <span class=\"p\">])</span>            <span class=\"p\">})</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">applyProcessing</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">inputKeys</span> <span class=\"o\">=</span> <span class=\"n\">currentFilter</span><span class=\"o\">.</span><span class=\"n\">inputKeys</span>        <span class=\"k\">if</span> <span class=\"n\">inputKeys</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"n\">kCIInputIntensityKey</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">currentFilter</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">filterIntensity</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">kCIInputIntensityKey</span><span class=\"p\">)</span> <span class=\"p\">}</span>        <span class=\"k\">if</span> <span class=\"n\">inputKeys</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"n\">kCIInputRadiusKey</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">currentFilter</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">filterIntensity</span> <span class=\"o\">*</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">kCIInputRadiusKey</span><span class=\"p\">)</span> <span class=\"p\">}</span>        <span class=\"k\">if</span> <span class=\"n\">inputKeys</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"n\">kCIInputScaleKey</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">currentFilter</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">filterIntensity</span> <span class=\"o\">*</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">kCIInputScaleKey</span><span class=\"p\">)</span> <span class=\"p\">}</span>                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">outputImage</span> <span class=\"o\">=</span> <span class=\"n\">currentFilter</span><span class=\"o\">.</span><span class=\"n\">outputImage</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">cgimg</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"nf\">createCGImage</span><span class=\"p\">(</span><span class=\"n\">outputImage</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">outputImage</span><span class=\"o\">.</span><span class=\"n\">extent</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">uiImage</span> <span class=\"o\">=</span> <span class=\"kt\">UIImage</span><span class=\"p\">(</span><span class=\"nv\">cgImage</span><span class=\"p\">:</span> <span class=\"n\">cgimg</span><span class=\"p\">)</span>            <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">uiImage</span><span class=\"p\">:</span> <span class=\"n\">uiImage</span><span class=\"p\">)</span>            <span class=\"n\">processedImage</span> <span class=\"o\">=</span> <span class=\"n\">uiImage</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">loadImage</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">inputImage</span> <span class=\"o\">=</span> <span class=\"n\">inputImage</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>                <span class=\"k\">let</span> <span class=\"nv\">beginImage</span> <span class=\"o\">=</span> <span class=\"kt\">CIImage</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"n\">inputImage</span><span class=\"p\">)</span>        <span class=\"n\">currentFilter</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"n\">beginImage</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">kCIInputImageKey</span><span class=\"p\">)</span>        <span class=\"nf\">applyProcessing</span><span class=\"p\">()</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">setFilter</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">filter</span><span class=\"p\">:</span> <span class=\"kt\">CIFilter</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">currentFilter</span> <span class=\"o\">=</span> <span class=\"n\">filter</span>        <span class=\"nf\">loadImage</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"kt\">ImageSaver</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span> <span class=\"p\">{</span>    <span class=\"k\">var</span> <span class=\"nv\">successHandler</span><span class=\"p\">:</span> <span class=\"p\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span>    <span class=\"k\">var</span> <span class=\"nv\">errorHandler</span><span class=\"p\">:</span> <span class=\"p\">((</span><span class=\"kt\">Error</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span>        <span class=\"kd\">func</span> <span class=\"nf\">writeToPhotoAlbum</span><span class=\"p\">(</span><span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">UIImage</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"kt\">UIImageWriteToSavedPhotosAlbum</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"kd\">#selector(</span><span class=\"nf\">saveError</span><span class=\"kd\">)</span><span class=\"p\">,</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"kd\">@objc</span> <span class=\"kd\">func</span> <span class=\"nf\">saveError</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">UIImage</span><span class=\"p\">,</span> <span class=\"n\">didFinishSavingWithError</span> <span class=\"nv\">error</span><span class=\"p\">:</span> <span class=\"kt\">Error</span><span class=\"p\">?,</span> <span class=\"nv\">contextInfo</span><span class=\"p\">:</span> <span class=\"kt\">UnsafeRawPointer</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">{</span>            <span class=\"nf\">errorHandler</span><span class=\"p\">?(</span><span class=\"n\">error</span><span class=\"p\">)</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"nf\">successHandler</span><span class=\"p\">?()</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ImagePicker.swift</span><span class=\"c1\">//  Instafilter</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ImagePicker</span><span class=\"p\">:</span> <span class=\"kt\">UIViewControllerRepresentable</span> <span class=\"p\">{</span>    <span class=\"kd\">@Binding</span> <span class=\"k\">var</span> <span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">UIImage</span><span class=\"p\">?</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">presentationMode</span>        <span class=\"kd\">class</span> <span class=\"kt\">Coordinator</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span><span class=\"p\">,</span> <span class=\"kt\">UIImagePickerControllerDelegate</span><span class=\"p\">,</span> <span class=\"kt\">UINavigationControllerDelegate</span> <span class=\"p\">{</span>        <span class=\"k\">var</span> <span class=\"nv\">parent</span><span class=\"p\">:</span> <span class=\"kt\">ImagePicker</span>                <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">parent</span><span class=\"p\">:</span> <span class=\"kt\">ImagePicker</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span>        <span class=\"p\">}</span>                <span class=\"kd\">func</span> <span class=\"nf\">imagePickerController</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">picker</span><span class=\"p\">:</span> <span class=\"kt\">UIImagePickerController</span><span class=\"p\">,</span> <span class=\"n\">didFinishPickingMediaWithInfo</span> <span class=\"nv\">info</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">UIImagePickerController</span><span class=\"o\">.</span><span class=\"kt\">InfoKey</span> <span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"p\">])</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">uiImage</span> <span class=\"o\">=</span> <span class=\"n\">info</span><span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">originalImage</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">UIImage</span> <span class=\"p\">{</span>                <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">uiImage</span>            <span class=\"p\">}</span>                        <span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">()</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">makeCoordinator</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Coordinator</span> <span class=\"p\">{</span>        <span class=\"kt\">Coordinator</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">makeUIViewController</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UIImagePickerController</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">picker</span> <span class=\"o\">=</span> <span class=\"kt\">UIImagePickerController</span><span class=\"p\">()</span>        <span class=\"n\">picker</span><span class=\"o\">.</span><span class=\"n\">delegate</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">coordinator</span>        <span class=\"k\">return</span> <span class=\"n\">picker</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">updateUIViewController</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">uiViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIImagePickerController</span><span class=\"p\">,</span> <span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">Context</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"p\">}</span>    <span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/Instafilter",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-11-10T00:00:00-05:00",
            "date_modified": "2020-11-10T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/CoreData",
            "title": "CoreData",
            "summary": "Take an in-depth tour of how SwiftUI and Core Data work",
            "content_text": "Keywords  URLSession.shared.dataTask  JSONEncoder/JSONDecoder  GeometryReader  Codable  @ViewBuilder  @escapingKeynotes  Managed objects are saved on calling save() on their managed object context  If all the properties of a type conform to the Hashable protocol, the type itself can also conform just by adding Hashable to its list of conformances  We can control the way Xcode generates code for a Core Data entity by adjusting the Codegen property in the data model inspector  We can filter a fetch request using NSPredicate. If you want more complex predicates you can combine multiple instances of NSPredicate using NSCompoundPredicate  NSSet is the Objective-C version of Swift’s Set type  %@ in an NSPredicate is dynamically replaced with some sort of value in quote marks  We can dynamically replace an NSPredicate string with an attribute name using %K  All managed objects have a unique object ID. This works more or less like a UUID  We should check whether a managed object context has changes before we try to save it. This is as simple as reading its hasChanges property  Fetch requests take an array of sort descriptors, and they are applied in order  @NSManaged pre-dates property wrappers in Swift  Fetch requests can not only be created using the @FetchRequest property wrapper. We can also create fetch requests without the property wrapper using the FetchRequest struct.TopicsCreating NSManagedObject subclasses  Create entity Movie and add attributes  Inspector &gt; Show Data Model Inspector and change Codegen to Manual/None  Editor &gt; Create NSManagedObject  Add computed properties to avoid “nil coalescing”@NSManaged public var title: String?@NSManaged public var director: String?@NSManaged public var year: Int16public var wrappedTitle: String {    return title ?? \"Unknown Title\"}Conditional saving of NSManagedObjectContext  It’s common to bulk your saves together so that you save everything at once, which has a lower performance impact  Every managed object is given a hasChanges property  The entire context also contains a hasChanges property that checks whether any object owned by the context has changes  We should always wrap save() in the check, like this:if self.moc.hasChanges {    try? self.moc.save()}Ensuring Core Data objects are unique using constraints  Core Data gives us constraints: we can make one attribute constrained so that it must always be unique  If there was some data already written that clashes with our constraint, we can choose how it should handle merging the data  Look in the data model inspector for Constraints, and press the + button directly below and rename it to “title”      Add following codes in ContentView.swift     struct ContentView: View {     @Environment(\\.managedObjectContext) var moc     @FetchRequest(entity: Movie.entity(), sortDescriptors: [])     var movies: FetchedResults&lt;Movie&gt;     var body: some View {         VStack {             List(movies, id: \\.self) { movie in                 Text(movie.title ?? \"Unknown\")             }             Button(\"Add\") {                 let movie = Movie(context: moc)                 movie.title = \"Mulan\"             }                             Button(\"Save\") {                 do {                     if self.moc.hasChanges{                         try self.moc.save()                     }                 } catch {                     print(error.localizedDescription)                 }             }         }     } }        Add merge policy in Persistence.swiftstruct PersistenceController {    ...    let container: NSPersistentContainer    init(inMemory: Bool = false) {        container = NSPersistentContainer(name: \"CoreDataProject\")        container.viewContext.mergePolicy = NSMergeByPropertyObjectTrumpMergePolicy        ...Filtering @FetchRequest using NSPredicateWhen we use SwiftUI’s @FetchRequest property wrapper, we can provide an array of sort descriptors to control the ordering of results, but we can also provide an NSPredicate to control which results should be shown.import CoreDataimport SwiftUIstruct ContentView: View {    @Environment(\\.managedObjectContext) var moc    @FetchRequest(entity: Ship.entity(), sortDescriptors: [], predicate: nil) var ships: FetchedResults&lt;Ship&gt;    var body: some View {        VStack {            List(ships, id: \\.self) { ship in                Text(ship.name ?? \"Unknown name\")            }            Button(\"Add Examples\") {                let ship1 = Ship(context: self.moc)                ship1.name = \"Enterprise\"                ship1.universe = \"Star Trek\"                let ship2 = Ship(context: self.moc)                ship2.name = \"Defiant\"                ship2.universe = \"Star Trek\"                let ship3 = Ship(context: self.moc)                ship3.name = \"Millennium Falcon\"                ship3.universe = \"Star Wars\"                let ship4 = Ship(context: self.moc)                ship4.name = \"Executor\"                ship4.universe = \"Star Wars\"                try? self.moc.save()            }        }    }}Ask for ships that are from Star Wars, like this:@FetchRequest(entity: Ship.entity(), sortDescriptors: [], predicate: NSPredicate(format: \"universe == 'Star Wars'\")) var ships: FetchedResults&lt;Ship&gt;or use special syntax %@ instead:NSPredicate(format: \"universe == %@\", \"Star Wars\"))We can also use comparison such as &lt;, &gt;. For example this will return Defiant, Enterprise, and Executor:NSPredicate(format: \"name &lt; %@\", \"F\")) var ships: FetchedResults&lt;Ship&gt;Use an IN predicate to check whether the universe is one of three options from an array, like this:NSPredicate(format: \"universe IN %@\", [\"Aliens\", \"Firefly\", \"Star Trek\"])Examine part of a string, using operators such as BEGINSWITH and CONTAINS. For example, this will return all ships that start with a capital E (case-sensitive):NSPredicate(format: \"name BEGINSWITH %@\", \"E\"))To ignore case-sensitivityNSPredicate(format: \"name BEGINSWITH[c] %@\", \"e\"))Flip predicates around using NOT:NSPredicate(format: \"NOT name BEGINSWITH[c] %@\", \"e\"))Dynamically filtering @FetchRequest with SwiftUI////  FilteredList.swift//  CoreDataProject//import SwiftUIimport CoreDatastruct FilteredList&lt;T: NSManagedObject, Content: View&gt;: View {    var fetchRequest: FetchRequest&lt;T&gt;    let content: (T) -&gt; Content        var body: some View {        List(fetchRequest.wrappedValue, id: \\.self) { value in            self.content(value)        }    }        init(filterKey: String, filterValue: String, @ViewBuilder content: @escaping (T) -&gt; Content) {        fetchRequest = FetchRequest&lt;T&gt;(entity: T.entity(), sortDescriptors: [],                                            predicate: NSPredicate(format: \"%K BEGINSWITH %@\", filterKey, filterValue))        self.content = content    }}////  ContentView.swift//  CoreDataProject//import SwiftUIimport CoreDatastruct ContentView: View {    @Environment(\\.managedObjectContext) var moc    @State private var lastNameFilter = \"A\"    var body: some View {        VStack {            FilteredList(filterKey: \"lastName\", filterValue: lastNameFilter) { (singer: Singer) in                Text(\"\\(singer.wrappedFirstName) \\(singer.wrappedLastName)\")            }            Button(\"Add Examples\") {                let taylor = Singer(context: self.moc)                taylor.firstName = \"Taylor\"                taylor.lastName = \"Swift\"                let ed = Singer(context: self.moc)                ed.firstName = \"Ed\"                ed.lastName = \"Sheeran\"                let adele = Singer(context: self.moc)                adele.firstName = \"Adele\"                adele.lastName = \"Adkins\"                try? self.moc.save()            }            Button(\"Show A\") {                self.lastNameFilter = \"A\"            }            Button(\"Show S\") {                self.lastNameFilter = \"S\"            }        }    }}One-to-many relationships with Core Data, SwiftUI, and @FetchRequestCreate two entities: Candy, with attribute “name”, and Country, with attributes “fullName” and “shortName”. Then add a constaint for “shortName”.With Country selected, press + under the Relationships table. Call the relationship “candy”, change its destination to Candy, then over in the data model inspector change Type to To Many.Now select Candy, and add another relationship there. Call the relationship “origin”, change its destination to “Country”, then set its inverse to “candy” so Core Data understands the link goes both ways.In Country class, we need to deal with NSSet while cleaning up Core Data’s optionals:  Convert from NSSet to Set&lt;Candy&gt;  Convert Set&lt;Candy&gt; into an array, so that ForEach can read individual values from there  Sort that arraypublic var candyArray: [Candy] {    let set = candy as? Set&lt;Candy&gt; ?? []    return set.sorted {        $0.wrappedName &lt; $1.wrappedName    }}VStack {    List {        ForEach(countries, id: \\.self) { country in            Section(header: Text(country.wrappedFullName)) {                ForEach(country.candyArray, id: \\.self) { candy in                    Text(candy.wrappedName)                }            }        }    }    Button(\"Add\") {        let candy1 = Candy(context: self.moc)        candy1.name = \"Mars\"        candy1.origin = Country(context: self.moc)        candy1.origin?.shortName = \"UK\"        candy1.origin?.fullName = \"United Kingdom\"        let candy2 = Candy(context: self.moc)        candy2.name = \"KitKat\"        candy2.origin = Country(context: self.moc)        candy2.origin?.shortName = \"UK\"        candy2.origin?.fullName = \"United Kingdom\"        let candy3 = Candy(context: self.moc)        candy3.name = \"Twix\"        candy3.origin = Country(context: self.moc)        candy3.origin?.shortName = \"UK\"        candy3.origin?.fullName = \"United Kingdom\"        let candy4 = Candy(context: self.moc)        candy4.name = \"Toblerone\"        candy4.origin = Country(context: self.moc)        candy4.origin?.shortName = \"CH\"        candy4.origin?.fullName = \"Switzerland\"        try? self.moc.save()    }}",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>URLSession.shared.dataTask</li>  <li>JSONEncoder/JSONDecoder</li>  <li>GeometryReader</li>  <li>Codable</li>  <li>@ViewBuilder</li>  <li>@escaping</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li>Managed objects are saved on calling <code class=\"highlighter-rouge\">save()</code> on their managed object context</li>  <li>If all the properties of a type conform to the Hashable protocol, the type itself can also conform just by adding <code class=\"highlighter-rouge\">Hashable</code> to its list of conformances</li>  <li>We can control the way Xcode generates code for a Core Data entity by adjusting the <code class=\"highlighter-rouge\">Codegen</code> property in the data model inspector</li>  <li>We can filter a fetch request using <code class=\"highlighter-rouge\">NSPredicate</code>. If you want more complex predicates you can combine multiple instances of <code class=\"highlighter-rouge\">NSPredicate</code> using <code class=\"highlighter-rouge\">NSCompoundPredicate</code></li>  <li><code class=\"highlighter-rouge\">NSSet</code> is the Objective-C version of Swift’s <code class=\"highlighter-rouge\">Set</code> type</li>  <li><code class=\"highlighter-rouge\">%@</code> in an <code class=\"highlighter-rouge\">NSPredicate</code> is dynamically replaced with some sort of value in quote marks</li>  <li>We can dynamically replace an <code class=\"highlighter-rouge\">NSPredicate</code> string with an attribute name using <code class=\"highlighter-rouge\">%K</code></li>  <li>All managed objects have a unique object ID. This works more or less like a UUID</li>  <li>We should check whether a managed object context has changes before we try to save it. This is as simple as reading its <code class=\"highlighter-rouge\">hasChanges</code> property</li>  <li>Fetch requests take an array of sort descriptors, and they are applied in order</li>  <li><code class=\"highlighter-rouge\">@NSManaged</code> pre-dates property wrappers in Swift</li>  <li>Fetch requests can not only be created using the <code class=\"highlighter-rouge\">@FetchRequest</code> property wrapper. We can also create fetch requests without the property wrapper using the <code class=\"highlighter-rouge\">FetchRequest</code> struct.</li></ol><h3 id=\"topics\">Topics</h3><h4 id=\"creating-nsmanagedobject-subclasses\">Creating NSManagedObject subclasses</h4><ol>  <li>Create entity <strong>Movie</strong> and add attributes</li>  <li><strong><em>Inspector</em></strong> &gt; <strong><em>Show Data Model Inspector</em></strong> and change <strong>Codegen</strong> to <strong>Manual/None</strong></li>  <li><strong>Editor</strong> &gt; <strong>Create NSManagedObject</strong></li>  <li>Add computed properties to avoid “nil coalescing”</li></ol><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@NSManaged</span> <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span><span class=\"kd\">@NSManaged</span> <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">director</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span><span class=\"kd\">@NSManaged</span> <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">year</span><span class=\"p\">:</span> <span class=\"kt\">Int16</span><span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">wrappedTitle</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>    <span class=\"k\">return</span> <span class=\"n\">title</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown Title\"</span><span class=\"p\">}</span></code></pre></div></div><h4 id=\"conditional-saving-of-nsmanagedobjectcontext\">Conditional saving of NSManagedObjectContext</h4><ol>  <li>It’s common to bulk your saves together so that you save everything at once, which has a lower performance impact</li>  <li>Every managed object is given a <code class=\"highlighter-rouge\">hasChanges</code> property</li>  <li>The entire context also contains a <code class=\"highlighter-rouge\">hasChanges</code> property that checks whether any object owned by the context has changes</li>  <li>We should always wrap <code class=\"highlighter-rouge\">save()</code> in the check, like this:</li></ol><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"n\">hasChanges</span> <span class=\"p\">{</span>    <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span><span class=\"p\">}</span></code></pre></div></div><h4 id=\"ensuring-core-data-objects-are-unique-using-constraints\">Ensuring Core Data objects are unique using constraints</h4><ol>  <li>Core Data gives us constraints: we can make one attribute constrained so that it must always be unique</li>  <li>If there was some data already written that clashes with our constraint, we can choose how it should handle merging the data</li>  <li>Look in the data model inspector for <strong>Constraints</strong>, and press the + button directly below and rename it to “title”</li>  <li>    <p>Add following codes in <strong>ContentView.swift</strong></p>    <div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>     <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">moc</span>     <span class=\"kd\">@FetchRequest</span><span class=\"p\">(</span><span class=\"nv\">entity</span><span class=\"p\">:</span> <span class=\"kt\">Movie</span><span class=\"o\">.</span><span class=\"nf\">entity</span><span class=\"p\">(),</span> <span class=\"nv\">sortDescriptors</span><span class=\"p\">:</span> <span class=\"p\">[])</span>     <span class=\"k\">var</span> <span class=\"nv\">movies</span><span class=\"p\">:</span> <span class=\"kt\">FetchedResults</span><span class=\"o\">&lt;</span><span class=\"kt\">Movie</span><span class=\"o\">&gt;</span>     <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>         <span class=\"kt\">VStack</span> <span class=\"p\">{</span>             <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"n\">movies</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">movie</span> <span class=\"k\">in</span>                 <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">movie</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown\"</span><span class=\"p\">)</span>             <span class=\"p\">}</span>             <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Add\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                 <span class=\"k\">let</span> <span class=\"nv\">movie</span> <span class=\"o\">=</span> <span class=\"kt\">Movie</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"n\">moc</span><span class=\"p\">)</span>                 <span class=\"n\">movie</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"Mulan\"</span>             <span class=\"p\">}</span>                             <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                 <span class=\"k\">do</span> <span class=\"p\">{</span>                     <span class=\"k\">if</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"n\">hasChanges</span><span class=\"p\">{</span>                         <span class=\"k\">try</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>                     <span class=\"p\">}</span>                 <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>                     <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"p\">)</span>                 <span class=\"p\">}</span>             <span class=\"p\">}</span>         <span class=\"p\">}</span>     <span class=\"p\">}</span> <span class=\"p\">}</span></code></pre></div>    </div>  </li>  <li>Add merge policy in <strong>Persistence.swift</strong></li></ol><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PersistenceController</span> <span class=\"p\">{</span>    <span class=\"o\">...</span>    <span class=\"k\">let</span> <span class=\"nv\">container</span><span class=\"p\">:</span> <span class=\"kt\">NSPersistentContainer</span>    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">inMemory</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">container</span> <span class=\"o\">=</span> <span class=\"kt\">NSPersistentContainer</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"CoreDataProject\"</span><span class=\"p\">)</span>        <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"n\">viewContext</span><span class=\"o\">.</span><span class=\"n\">mergePolicy</span> <span class=\"o\">=</span> <span class=\"kt\">NSMergeByPropertyObjectTrumpMergePolicy</span>        <span class=\"o\">...</span></code></pre></div></div><h4 id=\"filtering-fetchrequest-using-nspredicate\">Filtering @FetchRequest using NSPredicate</h4><p>When we use SwiftUI’s <code class=\"highlighter-rouge\">@FetchRequest</code> property wrapper, we can provide an array of sort descriptors to control the ordering of results, but we can also provide an <code class=\"highlighter-rouge\">NSPredicate</code> to control which results should be shown.</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">CoreData</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">moc</span>    <span class=\"kd\">@FetchRequest</span><span class=\"p\">(</span><span class=\"nv\">entity</span><span class=\"p\">:</span> <span class=\"kt\">Ship</span><span class=\"o\">.</span><span class=\"nf\">entity</span><span class=\"p\">(),</span> <span class=\"nv\">sortDescriptors</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"nv\">predicate</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">ships</span><span class=\"p\">:</span> <span class=\"kt\">FetchedResults</span><span class=\"o\">&lt;</span><span class=\"kt\">Ship</span><span class=\"o\">&gt;</span>    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"n\">ships</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">ship</span> <span class=\"k\">in</span>                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">ship</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown name\"</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Add Examples\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">let</span> <span class=\"nv\">ship1</span> <span class=\"o\">=</span> <span class=\"kt\">Ship</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">ship1</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Enterprise\"</span>                <span class=\"n\">ship1</span><span class=\"o\">.</span><span class=\"n\">universe</span> <span class=\"o\">=</span> <span class=\"s\">\"Star Trek\"</span>                <span class=\"k\">let</span> <span class=\"nv\">ship2</span> <span class=\"o\">=</span> <span class=\"kt\">Ship</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">ship2</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Defiant\"</span>                <span class=\"n\">ship2</span><span class=\"o\">.</span><span class=\"n\">universe</span> <span class=\"o\">=</span> <span class=\"s\">\"Star Trek\"</span>                <span class=\"k\">let</span> <span class=\"nv\">ship3</span> <span class=\"o\">=</span> <span class=\"kt\">Ship</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">ship3</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Millennium Falcon\"</span>                <span class=\"n\">ship3</span><span class=\"o\">.</span><span class=\"n\">universe</span> <span class=\"o\">=</span> <span class=\"s\">\"Star Wars\"</span>                <span class=\"k\">let</span> <span class=\"nv\">ship4</span> <span class=\"o\">=</span> <span class=\"kt\">Ship</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">ship4</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Executor\"</span>                <span class=\"n\">ship4</span><span class=\"o\">.</span><span class=\"n\">universe</span> <span class=\"o\">=</span> <span class=\"s\">\"Star Wars\"</span>                <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>Ask for ships that are from Star Wars, like this:</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@FetchRequest</span><span class=\"p\">(</span><span class=\"nv\">entity</span><span class=\"p\">:</span> <span class=\"kt\">Ship</span><span class=\"o\">.</span><span class=\"nf\">entity</span><span class=\"p\">(),</span> <span class=\"nv\">sortDescriptors</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"nv\">predicate</span><span class=\"p\">:</span> <span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"universe == 'Star Wars'\"</span><span class=\"p\">))</span> <span class=\"k\">var</span> <span class=\"nv\">ships</span><span class=\"p\">:</span> <span class=\"kt\">FetchedResults</span><span class=\"o\">&lt;</span><span class=\"kt\">Ship</span><span class=\"o\">&gt;</span></code></pre></div></div><p>or use special syntax <code class=\"highlighter-rouge\">%@</code> instead:</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"universe == %@\"</span><span class=\"p\">,</span> <span class=\"s\">\"Star Wars\"</span><span class=\"p\">))</span></code></pre></div></div><p>We can also use comparison such as <code class=\"highlighter-rouge\">&lt;</code>, <code class=\"highlighter-rouge\">&gt;</code>. For example this will return Defiant, Enterprise, and Executor:</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"name &lt; %@\"</span><span class=\"p\">,</span> <span class=\"s\">\"F\"</span><span class=\"p\">))</span> <span class=\"k\">var</span> <span class=\"nv\">ships</span><span class=\"p\">:</span> <span class=\"kt\">FetchedResults</span><span class=\"o\">&lt;</span><span class=\"kt\">Ship</span><span class=\"o\">&gt;</span></code></pre></div></div><p>Use an IN predicate to check whether the universe is one of three options from an array, like this:</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"universe IN %@\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s\">\"Aliens\"</span><span class=\"p\">,</span> <span class=\"s\">\"Firefly\"</span><span class=\"p\">,</span> <span class=\"s\">\"Star Trek\"</span><span class=\"p\">])</span></code></pre></div></div><p>Examine part of a string, using operators such as BEGINSWITH and CONTAINS. For example, this will return all ships that start with a capital E (case-sensitive):</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"name BEGINSWITH %@\"</span><span class=\"p\">,</span> <span class=\"s\">\"E\"</span><span class=\"p\">))</span></code></pre></div></div><p>To ignore case-sensitivity</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"name BEGINSWITH[c] %@\"</span><span class=\"p\">,</span> <span class=\"s\">\"e\"</span><span class=\"p\">))</span></code></pre></div></div><p>Flip predicates around using <code class=\"highlighter-rouge\">NOT</code>:</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"NOT name BEGINSWITH[c] %@\"</span><span class=\"p\">,</span> <span class=\"s\">\"e\"</span><span class=\"p\">))</span></code></pre></div></div><h4 id=\"dynamically-filtering-fetchrequest-with-swiftui\">Dynamically filtering @FetchRequest with SwiftUI</h4><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  FilteredList.swift</span><span class=\"c1\">//  CoreDataProject</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CoreData</span><span class=\"kd\">struct</span> <span class=\"kt\">FilteredList</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">NSManagedObject</span><span class=\"p\">,</span> <span class=\"kt\">Content</span><span class=\"p\">:</span> <span class=\"kt\">View</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">var</span> <span class=\"nv\">fetchRequest</span><span class=\"p\">:</span> <span class=\"kt\">FetchRequest</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span>    <span class=\"k\">let</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Content</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"n\">fetchRequest</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">value</span> <span class=\"k\">in</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">filterKey</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">filterValue</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kd\">@ViewBuilder</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"kd\">@escaping</span> <span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Content</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">fetchRequest</span> <span class=\"o\">=</span> <span class=\"kt\">FetchRequest</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">entity</span><span class=\"p\">:</span> <span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"nf\">entity</span><span class=\"p\">(),</span> <span class=\"nv\">sortDescriptors</span><span class=\"p\">:</span> <span class=\"p\">[],</span>                                            <span class=\"nv\">predicate</span><span class=\"p\">:</span> <span class=\"kt\">NSPredicate</span><span class=\"p\">(</span><span class=\"nv\">format</span><span class=\"p\">:</span> <span class=\"s\">\"%K BEGINSWITH %@\"</span><span class=\"p\">,</span> <span class=\"n\">filterKey</span><span class=\"p\">,</span> <span class=\"n\">filterValue</span><span class=\"p\">))</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">content</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  CoreDataProject</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CoreData</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">moc</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">lastNameFilter</span> <span class=\"o\">=</span> <span class=\"s\">\"A\"</span>    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">FilteredList</span><span class=\"p\">(</span><span class=\"nv\">filterKey</span><span class=\"p\">:</span> <span class=\"s\">\"lastName\"</span><span class=\"p\">,</span> <span class=\"nv\">filterValue</span><span class=\"p\">:</span> <span class=\"n\">lastNameFilter</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"nv\">singer</span><span class=\"p\">:</span> <span class=\"kt\">Singer</span><span class=\"p\">)</span> <span class=\"k\">in</span>                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">singer</span><span class=\"o\">.</span><span class=\"n\">wrappedFirstName</span><span class=\"se\">)</span><span class=\"s\"> </span><span class=\"se\">\\(</span><span class=\"n\">singer</span><span class=\"o\">.</span><span class=\"n\">wrappedLastName</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Add Examples\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">let</span> <span class=\"nv\">taylor</span> <span class=\"o\">=</span> <span class=\"kt\">Singer</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">taylor</span><span class=\"o\">.</span><span class=\"n\">firstName</span> <span class=\"o\">=</span> <span class=\"s\">\"Taylor\"</span>                <span class=\"n\">taylor</span><span class=\"o\">.</span><span class=\"n\">lastName</span> <span class=\"o\">=</span> <span class=\"s\">\"Swift\"</span>                <span class=\"k\">let</span> <span class=\"nv\">ed</span> <span class=\"o\">=</span> <span class=\"kt\">Singer</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">ed</span><span class=\"o\">.</span><span class=\"n\">firstName</span> <span class=\"o\">=</span> <span class=\"s\">\"Ed\"</span>                <span class=\"n\">ed</span><span class=\"o\">.</span><span class=\"n\">lastName</span> <span class=\"o\">=</span> <span class=\"s\">\"Sheeran\"</span>                <span class=\"k\">let</span> <span class=\"nv\">adele</span> <span class=\"o\">=</span> <span class=\"kt\">Singer</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                <span class=\"n\">adele</span><span class=\"o\">.</span><span class=\"n\">firstName</span> <span class=\"o\">=</span> <span class=\"s\">\"Adele\"</span>                <span class=\"n\">adele</span><span class=\"o\">.</span><span class=\"n\">lastName</span> <span class=\"o\">=</span> <span class=\"s\">\"Adkins\"</span>                <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>            <span class=\"p\">}</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Show A\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">lastNameFilter</span> <span class=\"o\">=</span> <span class=\"s\">\"A\"</span>            <span class=\"p\">}</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Show S\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">lastNameFilter</span> <span class=\"o\">=</span> <span class=\"s\">\"S\"</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h4 id=\"one-to-many-relationships-with-core-data-swiftui-and-fetchrequest\">One-to-many relationships with Core Data, SwiftUI, and @FetchRequest</h4><p>Create two entities: <strong>Candy</strong>, with attribute “name”, and <strong>Country</strong>, with attributes “fullName” and “shortName”. Then add a constaint for “shortName”.</p><p>With Country selected, press + under the Relationships table. Call the relationship “candy”, change its destination to Candy, then over in the data model inspector change Type to To Many.</p><p>Now select Candy, and add another relationship there. Call the relationship “origin”, change its destination to “Country”, then set its inverse to “candy” so Core Data understands the link goes both ways.</p><p>In <strong>Country</strong> class, we need to deal with <code class=\"highlighter-rouge\">NSSet</code> while cleaning up Core Data’s optionals:</p><ol>  <li>Convert from <code class=\"highlighter-rouge\">NSSet</code> to <code class=\"highlighter-rouge\">Set&lt;Candy&gt;</code></li>  <li>Convert <code class=\"highlighter-rouge\">Set&lt;Candy&gt;</code> into an array, so that <code class=\"highlighter-rouge\">ForEach</code> can read individual values from there</li>  <li>Sort that array</li></ol><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">candyArray</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Candy</span><span class=\"p\">]</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">set</span> <span class=\"o\">=</span> <span class=\"n\">candy</span> <span class=\"k\">as?</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">Candy</span><span class=\"o\">&gt;</span> <span class=\"p\">??</span> <span class=\"p\">[]</span>    <span class=\"k\">return</span> <span class=\"k\">set</span><span class=\"o\">.</span><span class=\"n\">sorted</span> <span class=\"p\">{</span>        <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">wrappedName</span> <span class=\"o\">&lt;</span> <span class=\"nv\">$1</span><span class=\"o\">.</span><span class=\"n\">wrappedName</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">VStack</span> <span class=\"p\">{</span>    <span class=\"kt\">List</span> <span class=\"p\">{</span>        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">countries</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">country</span> <span class=\"k\">in</span>            <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"o\">.</span><span class=\"n\">wrappedFullName</span><span class=\"p\">))</span> <span class=\"p\">{</span>                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">country</span><span class=\"o\">.</span><span class=\"n\">candyArray</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">candy</span> <span class=\"k\">in</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">candy</span><span class=\"o\">.</span><span class=\"n\">wrappedName</span><span class=\"p\">)</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Add\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">candy1</span> <span class=\"o\">=</span> <span class=\"kt\">Candy</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy1</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Mars\"</span>        <span class=\"n\">candy1</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"kt\">Country</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy1</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">shortName</span> <span class=\"o\">=</span> <span class=\"s\">\"UK\"</span>        <span class=\"n\">candy1</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">fullName</span> <span class=\"o\">=</span> <span class=\"s\">\"United Kingdom\"</span>        <span class=\"k\">let</span> <span class=\"nv\">candy2</span> <span class=\"o\">=</span> <span class=\"kt\">Candy</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy2</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"KitKat\"</span>        <span class=\"n\">candy2</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"kt\">Country</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy2</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">shortName</span> <span class=\"o\">=</span> <span class=\"s\">\"UK\"</span>        <span class=\"n\">candy2</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">fullName</span> <span class=\"o\">=</span> <span class=\"s\">\"United Kingdom\"</span>        <span class=\"k\">let</span> <span class=\"nv\">candy3</span> <span class=\"o\">=</span> <span class=\"kt\">Candy</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy3</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Twix\"</span>        <span class=\"n\">candy3</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"kt\">Country</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy3</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">shortName</span> <span class=\"o\">=</span> <span class=\"s\">\"UK\"</span>        <span class=\"n\">candy3</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">fullName</span> <span class=\"o\">=</span> <span class=\"s\">\"United Kingdom\"</span>        <span class=\"k\">let</span> <span class=\"nv\">candy4</span> <span class=\"o\">=</span> <span class=\"kt\">Candy</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy4</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"Toblerone\"</span>        <span class=\"n\">candy4</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"kt\">Country</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">candy4</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">shortName</span> <span class=\"o\">=</span> <span class=\"s\">\"CH\"</span>        <span class=\"n\">candy4</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">fullName</span> <span class=\"o\">=</span> <span class=\"s\">\"Switzerland\"</span>        <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/CoreData",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-11-04T00:00:00-05:00",
            "date_modified": "2020-11-04T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/Bookworm",
            "title": "Bookworm",
            "summary": "Use Core Data to build an app that tracks books you like",
            "content_text": "Corrections  Now think about sheets… does that mean the presented view can call the original its ancestor? SwiftUI has an answer, and it’s “no”…This above statement from here is no longer correct. Sheets now inherit the environment from their parent views, which can be confirmed at  here:  Feb 4, 2020 - Luca Bernardi from the SwiftUI team confirmed that this is not the intended behavior.  Aug 5, 2020 - This behavior has been fixed in the iOS 14.0/macOS 11.0 SDKs. Sheets now do inherit their environment.  This behavior has been fixed. As of Xcode 12.0 (the iOS 14.0/macOS 11.0 SDKs), sheets do inherit their environment.Thus the following codes can be changed from.sheet(isPresented: $showingAddScreen, content: {    AddBookView().environment(\\.managedObjectContext, self.moc)})to.sheet(isPresented: $showingAddScreen, content: {    AddBookView()})in ContentView.swift.Keywords  CoreData  @Binding  Environment  Sheet  Custom component, e.g., EmojiRatingViewKeynotes  @Binding lets us share one value in two places and it’s mainly used for creating custom UI components. It also works great with private properties  We can pop a view from a NavigationView using the same presentation mode dismiss code we use for sheets. Popping a view (from stack) is the equivalent of tapping Back or swiping from the left edge  Images from SF Symbols can be shown larger or small by using the font() modifier. SF Symbols automatically adapts to the text around it, so you can render them as large or small as you need  Type erasure (Anyview) lets us hide the underlying type of an object. AnyView conforms to View  There are two size classes: regular and compact  We must attach onDelete(perform:) to a ForEach view instead  We can create a testing managed object context for the purpose of SwiftUI previews. All we need to do is provide a concurrency type, such as main queue concurrency  A Core Data entity is akin to a class or struct in Swift. And Core Data has effectively no limit on the number of objects we store  Constant bindings cannot have their value changed by the user, e.g., Toggle(isOn: .constant(true))Code////  ContentView.swift//  Bookworm//import SwiftUIimport CoreDatastruct ContentView: View {    @Environment(\\.managedObjectContext) private var moc    @FetchRequest(entity: Book.entity(), sortDescriptors: [        NSSortDescriptor(keyPath: \\Book.title, ascending: true),        NSSortDescriptor(keyPath: \\Book.author, ascending: true)    ])    private var books: FetchedResults&lt;Book&gt;        @State private var showingAddScreen = false    var body: some View {        NavigationView {            List {                ForEach(books, id: \\.self) { book in                    NavigationLink(destination: DetailView(book: book)) {                        EmojiRatingView(rating: book.rating)                            .font(.largeTitle)                                            VStack(alignment: .leading) {                            Text(book.title ?? \"Unknown Title\")                                .font(.headline)                            Text(book.author ?? \"Unknown Author\")                                .foregroundColor(.secondary)                        }                    }                }                .onDelete(perform: { indexSet in                    deleteBooks(at: indexSet)                })            }            .navigationBarTitle(\"Bookworm\")            .navigationBarItems(leading: EditButton(), trailing: Button(action: {                self.showingAddScreen.toggle()            }) {                Image(systemName: \"plus\")            })            .sheet(isPresented: $showingAddScreen, content: {                AddBookView() // .environment(\\.managedObjectContext, self.moc)            })        }    }        func deleteBooks(at offsets: IndexSet) {        for offset in offsets {            let book = books[offset]                        moc.delete(book)        }                try? moc.save()    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  AddBookView.swift//  Bookworm//import SwiftUIstruct AddBookView: View {    @Environment(\\.managedObjectContext) private var moc    @Environment(\\.presentationMode) private var presentationMode        let genres = [\"Fantasy\", \"Horror\", \"Kids\", \"Mystery\", \"Poetry\", \"Romance\", \"Thriller\"]        @State private var title = \"\"    @State private var author = \"\"    @State private var rating = 3    @State private var genre = \"Fantasy\"    @State private var review = \"\"        var body: some View {        NavigationView {            Form {                Section {                    TextField(\"Name of book\", text: $title)                        .disableAutocorrection(true)                    TextField(\"Author's name\", text: $author)                        .disableAutocorrection(true)                                        Picker(\"Genre\", selection: $genre) {                        ForEach(genres, id: \\.self) {                            Text($0)                        }                    }                }                                Section(header: Text(\"Rating\")) {                    RatingView(rating: $rating)                }                                Section(header: Text(\"Review\")) {                    TextEditor(text: $review)                        .disableAutocorrection(true)                }                                Section {                    Button(\"Save\") {                        let newBook = Book(context: self.moc)                        newBook.title = self.title                        newBook.author = self.author                        newBook.rating = Int16(self.rating)                        newBook.genre = self.genre                        newBook.review = self.review                                                try? self.moc.save()                        self.presentationMode.wrappedValue.dismiss()                    }                }            }        }    }}struct AddBookView_Previews: PreviewProvider {    static var previews: some View {        AddBookView()    }}////  DetailView.swift//  Bookworm//import SwiftUIimport CoreDatastruct DetailView: View {    @Environment(\\.managedObjectContext) private var moc    @Environment(\\.presentationMode) private var presentationMode    @State private var showingDeleteAlert = false        let book: Book        var body: some View {        GeometryReader { geometry in            VStack {                ZStack(alignment: .bottomTrailing, content: {                    Image(self.book.genre ?? \"Fantasy\")                        .frame(maxWidth: geometry.size.width)                                        Text(self.book.genre?.uppercased() ?? \"FANTASY\")                        .font(.caption)                        .fontWeight(.black)                        .padding(8)                        .foregroundColor(.white)                        .background(Color.black.opacity(0.7))                        .clipShape(Capsule())                        .offset(x: -5, y: -5)                })                                Text(self.book.author ?? \"Unknown author\")                    .font(.title)                    .foregroundColor(.secondary)                                Text(self.book.review ?? \"No review\")                    .padding()                                RatingView(rating: .constant(Int(self.book.rating)))                    .font(.largeTitle)                                Spacer()            }        }        .navigationBarTitle(Text(book.title ?? \"Unknown Book\"), displayMode: .inline)        .navigationBarItems(trailing: Button(action: {            self.showingDeleteAlert = true        }) {            Image(systemName: \"trash\")        })        .alert(isPresented: $showingDeleteAlert, content: {            Alert(title: Text(\"Delete book\"), message: Text(\"Are you sure?\"), primaryButton: .destructive(Text(\"Delete\")) {                self.deleteBook()            }, secondaryButton: .cancel())        })    }        func deleteBook() {        moc.delete(book)                presentationMode.wrappedValue.dismiss()    }}struct DetailView_Previews: PreviewProvider {    static let moc = NSManagedObjectContext(concurrencyType: .mainQueueConcurrencyType)        static var previews: some View {        let book = Book(context: moc)        book.title = \"Test book\"        book.author = \"Test author\"        book.genre = \"Poetry\"        book.rating = 4        book.review = \"This is a great book.\"                return NavigationView {            DetailView(book: book)        }    }}////  RatingView.swift//  Bookworm//import SwiftUIstruct RatingView: View {    @Binding var rating: Int    var label = \"\"    var maximumRating = 5    var offImage: Image?    var onImage = Image(systemName: \"star.fill\")    var offColor = Color.gray    var onColor = Color.yellow        var body: some View {        HStack {            if label.isEmpty == false {                Text(label)            }                        ForEach(1..&lt;maximumRating + 1) { number in                self.image(for: number)                    .foregroundColor(number &gt; self.rating ? self.offColor : self.onColor)                    .onTapGesture {                        self.rating = number                    }            }        }    }        func image(for number: Int) -&gt; Image {        if number &gt; rating {            return offImage ?? onImage        } else {            return onImage        }    }}struct RatingView_Previews: PreviewProvider {    static var previews: some View {        RatingView(rating: .constant(4))    }}////  EmojiRatingView.swift//  Bookworm//import SwiftUIstruct EmojiRatingView: View {    let rating: Int16        var body: some View {        switch rating {        case 1:            return Text(\"1\")        case 2:            return Text(\"2\")        case 3:            return Text(\"3\")        case 4:            return Text(\"4\")        default:            return Text(\"5\")        }    }}struct EmojiRatingView_Previews: PreviewProvider {    static var previews: some View {        EmojiRatingView(rating: 3)    }}",
            "content_html": "<h3 id=\"corrections\">Corrections</h3><blockquote>  <p>Now think about sheets… does that mean the presented view can call the original its ancestor? SwiftUI has an answer, and it’s “no”…</p></blockquote><p>This above statement from <a href=\"https://www.hackingwithswift.com/books/ios-swiftui/creating-books-with-core-data\">here</a> is no longer correct. <code class=\"highlighter-rouge\">Sheets</code> now inherit the environment from their parent views, which can be confirmed at  <a href=\"https://oleb.net/2020/sheet-environment/\">here</a>:</p><blockquote>  <p>Feb 4, 2020 - Luca Bernardi from the SwiftUI team confirmed that this is not the intended behavior.</p>  <p>Aug 5, 2020 - This behavior has been fixed in the iOS 14.0/macOS 11.0 SDKs. Sheets now do inherit their environment.</p>  <p>This behavior has been fixed. As of Xcode 12.0 (the iOS 14.0/macOS 11.0 SDKs), sheets do inherit their environment.</p></blockquote><p>Thus the following codes can be changed from</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAddScreen</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"kt\">AddBookView</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">,</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span><span class=\"p\">})</span></code></pre></div></div><p>to</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAddScreen</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>    <span class=\"kt\">AddBookView</span><span class=\"p\">()</span><span class=\"p\">})</span></code></pre></div></div><p>in <code class=\"highlighter-rouge\">ContentView.swift</code>.</p><h3 id=\"keywords\">Keywords</h3><ul>  <li>CoreData</li>  <li>@Binding</li>  <li>Environment</li>  <li>Sheet</li>  <li>Custom component, e.g., EmojiRatingView</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li><code class=\"highlighter-rouge\">@Binding</code> lets us share one value in two places and it’s mainly used for creating custom UI components. It also works great with private properties</li>  <li>We can pop a view from a <code class=\"highlighter-rouge\">NavigationView</code> using the same presentation mode dismiss code we use for sheets. Popping a view (from stack) is the equivalent of tapping Back or swiping from the left edge</li>  <li>Images from SF Symbols can be shown larger or small by using the font() modifier. SF Symbols automatically adapts to the text around it, so you can render them as large or small as you need</li>  <li>Type erasure (<code class=\"highlighter-rouge\">Anyview</code>) lets us hide the underlying type of an object. <code class=\"highlighter-rouge\">AnyView</code> conforms to View</li>  <li>There are two size classes: regular and compact</li>  <li>We must attach onDelete(perform:) to a ForEach view instead</li>  <li>We can create a testing managed object context for the purpose of SwiftUI previews. All we need to do is provide a concurrency type, such as main queue concurrency</li>  <li>A Core Data entity is akin to a class or struct in Swift. And Core Data has effectively no limit on the number of objects we store</li>  <li>Constant bindings cannot have their value changed by the user, e.g., <code class=\"highlighter-rouge\">Toggle(isOn: .constant(true))</code></li></ol><h3 id=\"code\">Code</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  Bookworm</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CoreData</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">)</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">moc</span>    <span class=\"kd\">@FetchRequest</span><span class=\"p\">(</span><span class=\"nv\">entity</span><span class=\"p\">:</span> <span class=\"kt\">Book</span><span class=\"o\">.</span><span class=\"nf\">entity</span><span class=\"p\">(),</span> <span class=\"nv\">sortDescriptors</span><span class=\"p\">:</span> <span class=\"p\">[</span>        <span class=\"kt\">NSSortDescriptor</span><span class=\"p\">(</span><span class=\"nv\">keyPath</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"kt\">Book</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"nv\">ascending</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">),</span>        <span class=\"kt\">NSSortDescriptor</span><span class=\"p\">(</span><span class=\"nv\">keyPath</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"kt\">Book</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"nv\">ascending</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>    <span class=\"p\">])</span>    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">books</span><span class=\"p\">:</span> <span class=\"kt\">FetchedResults</span><span class=\"o\">&lt;</span><span class=\"kt\">Book</span><span class=\"o\">&gt;</span>        <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingAddScreen</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">List</span> <span class=\"p\">{</span>                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">books</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">book</span> <span class=\"k\">in</span>                    <span class=\"kt\">NavigationLink</span><span class=\"p\">(</span><span class=\"nv\">destination</span><span class=\"p\">:</span> <span class=\"kt\">DetailView</span><span class=\"p\">(</span><span class=\"nv\">book</span><span class=\"p\">:</span> <span class=\"n\">book</span><span class=\"p\">))</span> <span class=\"p\">{</span>                        <span class=\"kt\">EmojiRatingView</span><span class=\"p\">(</span><span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">rating</span><span class=\"p\">)</span>                            <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">largeTitle</span><span class=\"p\">)</span>                                            <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown Title\"</span><span class=\"p\">)</span>                                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown Author\"</span><span class=\"p\">)</span>                                <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"nf\">onDelete</span><span class=\"p\">(</span><span class=\"nv\">perform</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">indexSet</span> <span class=\"k\">in</span>                    <span class=\"nf\">deleteBooks</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">indexSet</span><span class=\"p\">)</span>                <span class=\"p\">})</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Bookworm\"</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span><span class=\"nv\">leading</span><span class=\"p\">:</span> <span class=\"kt\">EditButton</span><span class=\"p\">(),</span> <span class=\"nv\">trailing</span><span class=\"p\">:</span> <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingAddScreen</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>            <span class=\"p\">})</span> <span class=\"p\">{</span>                <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"plus\"</span><span class=\"p\">)</span>            <span class=\"p\">})</span>            <span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAddScreen</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"kt\">AddBookView</span><span class=\"p\">()</span> <span class=\"c1\">// .environment(\\.managedObjectContext, self.moc)</span>            <span class=\"p\">})</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">deleteBooks</span><span class=\"p\">(</span><span class=\"n\">at</span> <span class=\"nv\">offsets</span><span class=\"p\">:</span> <span class=\"kt\">IndexSet</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">for</span> <span class=\"n\">offset</span> <span class=\"k\">in</span> <span class=\"n\">offsets</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">book</span> <span class=\"o\">=</span> <span class=\"n\">books</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">]</span>                        <span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">)</span>        <span class=\"p\">}</span>                <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  AddBookView.swift</span><span class=\"c1\">//  Bookworm</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">AddBookView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">)</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">moc</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"p\">)</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">presentationMode</span>        <span class=\"k\">let</span> <span class=\"nv\">genres</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Fantasy\"</span><span class=\"p\">,</span> <span class=\"s\">\"Horror\"</span><span class=\"p\">,</span> <span class=\"s\">\"Kids\"</span><span class=\"p\">,</span> <span class=\"s\">\"Mystery\"</span><span class=\"p\">,</span> <span class=\"s\">\"Poetry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Romance\"</span><span class=\"p\">,</span> <span class=\"s\">\"Thriller\"</span><span class=\"p\">]</span>        <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">author</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">rating</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">genre</span> <span class=\"o\">=</span> <span class=\"s\">\"Fantasy\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">review</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">Form</span> <span class=\"p\">{</span>                <span class=\"kt\">Section</span> <span class=\"p\">{</span>                    <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Name of book\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">title</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">disableAutocorrection</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>                    <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Author's name\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">author</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">disableAutocorrection</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>                                        <span class=\"kt\">Picker</span><span class=\"p\">(</span><span class=\"s\">\"Genre\"</span><span class=\"p\">,</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">genre</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">genres</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                                <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Rating\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>                    <span class=\"kt\">RatingView</span><span class=\"p\">(</span><span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">rating</span><span class=\"p\">)</span>                <span class=\"p\">}</span>                                <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Review\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>                    <span class=\"kt\">TextEditor</span><span class=\"p\">(</span><span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">review</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">disableAutocorrection</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>                <span class=\"p\">}</span>                                <span class=\"kt\">Section</span> <span class=\"p\">{</span>                    <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"k\">let</span> <span class=\"nv\">newBook</span> <span class=\"o\">=</span> <span class=\"kt\">Book</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"p\">)</span>                        <span class=\"n\">newBook</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>                        <span class=\"n\">newBook</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">author</span>                        <span class=\"n\">newBook</span><span class=\"o\">.</span><span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"kt\">Int16</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">rating</span><span class=\"p\">)</span>                        <span class=\"n\">newBook</span><span class=\"o\">.</span><span class=\"n\">genre</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">genre</span>                        <span class=\"n\">newBook</span><span class=\"o\">.</span><span class=\"n\">review</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">review</span>                                                <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">save</span><span class=\"p\">()</span>                        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">()</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">AddBookView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">AddBookView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  DetailView.swift</span><span class=\"c1\">//  Bookworm</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">import</span> <span class=\"kt\">CoreData</span><span class=\"kd\">struct</span> <span class=\"kt\">DetailView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">managedObjectContext</span><span class=\"p\">)</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">moc</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"p\">)</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">presentationMode</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingDeleteAlert</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">let</span> <span class=\"nv\">book</span><span class=\"p\">:</span> <span class=\"kt\">Book</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">GeometryReader</span> <span class=\"p\">{</span> <span class=\"n\">geometry</span> <span class=\"k\">in</span>            <span class=\"kt\">VStack</span> <span class=\"p\">{</span>                <span class=\"kt\">ZStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">bottomTrailing</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">genre</span> <span class=\"p\">??</span> <span class=\"s\">\"Fantasy\"</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span>                                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">genre</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">uppercased</span><span class=\"p\">()</span> <span class=\"p\">??</span> <span class=\"s\">\"FANTASY\"</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">caption</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">fontWeight</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"o\">.</span><span class=\"nf\">opacity</span><span class=\"p\">(</span><span class=\"mf\">0.7</span><span class=\"p\">))</span>                        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Capsule</span><span class=\"p\">())</span>                        <span class=\"o\">.</span><span class=\"nf\">offset</span><span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"p\">)</span>                <span class=\"p\">})</span>                                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown author\"</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>                                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">review</span> <span class=\"p\">??</span> <span class=\"s\">\"No review\"</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>                                <span class=\"kt\">RatingView</span><span class=\"p\">(</span><span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">constant</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">rating</span><span class=\"p\">)))</span>                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">largeTitle</span><span class=\"p\">)</span>                                <span class=\"kt\">Spacer</span><span class=\"p\">()</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknown Book\"</span><span class=\"p\">),</span> <span class=\"nv\">displayMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span><span class=\"nv\">trailing</span><span class=\"p\">:</span> <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingDeleteAlert</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>        <span class=\"p\">})</span> <span class=\"p\">{</span>            <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"trash\"</span><span class=\"p\">)</span>        <span class=\"p\">})</span>        <span class=\"o\">.</span><span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingDeleteAlert</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>            <span class=\"kt\">Alert</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Delete book\"</span><span class=\"p\">),</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Are you sure?\"</span><span class=\"p\">),</span> <span class=\"nv\">primaryButton</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">destructive</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Delete\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">deleteBook</span><span class=\"p\">()</span>            <span class=\"p\">},</span> <span class=\"nv\">secondaryButton</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">cancel</span><span class=\"p\">())</span>        <span class=\"p\">})</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">deleteBook</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">moc</span><span class=\"o\">.</span><span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">book</span><span class=\"p\">)</span>                <span class=\"n\">presentationMode</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">DetailView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">moc</span> <span class=\"o\">=</span> <span class=\"kt\">NSManagedObjectContext</span><span class=\"p\">(</span><span class=\"nv\">concurrencyType</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">mainQueueConcurrencyType</span><span class=\"p\">)</span>        <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">book</span> <span class=\"o\">=</span> <span class=\"kt\">Book</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"n\">moc</span><span class=\"p\">)</span>        <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"Test book\"</span>        <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"s\">\"Test author\"</span>        <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">genre</span> <span class=\"o\">=</span> <span class=\"s\">\"Poetry\"</span>        <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>        <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">review</span> <span class=\"o\">=</span> <span class=\"s\">\"This is a great book.\"</span>                <span class=\"k\">return</span> <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">DetailView</span><span class=\"p\">(</span><span class=\"nv\">book</span><span class=\"p\">:</span> <span class=\"n\">book</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  RatingView.swift</span><span class=\"c1\">//  Bookworm</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">RatingView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Binding</span> <span class=\"k\">var</span> <span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>    <span class=\"k\">var</span> <span class=\"nv\">label</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"k\">var</span> <span class=\"nv\">maximumRating</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>    <span class=\"k\">var</span> <span class=\"nv\">offImage</span><span class=\"p\">:</span> <span class=\"kt\">Image</span><span class=\"p\">?</span>    <span class=\"k\">var</span> <span class=\"nv\">onImage</span> <span class=\"o\">=</span> <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"star.fill\"</span><span class=\"p\">)</span>    <span class=\"k\">var</span> <span class=\"nv\">offColor</span> <span class=\"o\">=</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">gray</span>    <span class=\"k\">var</span> <span class=\"nv\">onColor</span> <span class=\"o\">=</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">yellow</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">==</span> <span class=\"kc\">false</span> <span class=\"p\">{</span>                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>            <span class=\"p\">}</span>                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..&lt;</span><span class=\"n\">maximumRating</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">number</span> <span class=\"k\">in</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">number</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">rating</span> <span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nv\">offColor</span> <span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">onColor</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"n\">onTapGesture</span> <span class=\"p\">{</span>                        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">number</span>                    <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">image</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">number</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Image</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"n\">rating</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"n\">offImage</span> <span class=\"p\">??</span> <span class=\"n\">onImage</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"n\">onImage</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">RatingView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">RatingView</span><span class=\"p\">(</span><span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">constant</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">))</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  EmojiRatingView.swift</span><span class=\"c1\">//  Bookworm</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">EmojiRatingView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"kt\">Int16</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"k\">switch</span> <span class=\"n\">rating</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"mi\">1</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"1\"</span><span class=\"p\">)</span>        <span class=\"k\">case</span> <span class=\"mi\">2</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"2\"</span><span class=\"p\">)</span>        <span class=\"k\">case</span> <span class=\"mi\">3</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"3\"</span><span class=\"p\">)</span>        <span class=\"k\">case</span> <span class=\"mi\">4</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"4\"</span><span class=\"p\">)</span>        <span class=\"k\">default</span><span class=\"p\">:</span>            <span class=\"k\">return</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"5\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">EmojiRatingView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">EmojiRatingView</span><span class=\"p\">(</span><span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/Bookworm",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-11-02T00:00:00-05:00",
            "date_modified": "2020-11-02T00:00:00-05:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/CupcakeCorner",
            "title": "CupcakeCorner",
            "summary": "Build an app that sends and receives JSON from the internet",
            "content_text": "Keywords  URLSession.shared.dataTask  JSONEncoder/JSONDecoder  GeometryReader  CodableKeynotes  If a Swift struct is made up only of properties that conform to Codable, the whole struct itself can conform to Codable  Grand Central Dispatch is Apple’s framework for running work across multiple threads  We can create an enum to give a type some specific coding keys, and name the enum whatever we want  Swifts arrays use generics and we can’t make an untyped array  The @Published property wrapper places our properties inside a Published struct. Behind the scenes, this is actually similar to how optionals work  Creating a URL from a string returns an optional URL  Strings, integers, and Booleans already conform to Codable  URLRequest doesn’t fetch anything; it just describes how data should be fetched  The CodingKey protocol lets us list the properties we want to archive and unarchive as enum cases  Structs cannot be used with @ObservedObject  We should always change our user interface on the main thread  It’s common to use the shared property of URLSession rather than creating a new session ourselves  If the properties already have default values, you don’t need to include them in the initializer  When a URLSession data task completes, it might send us data or an error, but not bothCode////  ContentView.swift//  CupcakeCorner//import SwiftUIstruct ContentView: View {    @ObservedObject var order = Order()        var body: some View {        NavigationView {            Form {                Section {                    Picker(\"Select your cake type\", selection: $order.type) {                        ForEach(0..&lt;Order.types.count) {                            Text(Order.types[$0])                        }                    }                                        Stepper(value: $order.quantity, in : 3...20) {                        Text(\"Number of cakes: \\(order.quantity)\")                    }                }                                Section {                    Toggle(isOn: $order.specialRequestEnabled.animation()) {                        Text(\"Any special requests?\")                    }                                        if order.specialRequestEnabled {                        Toggle(isOn: $order.extraFrosting) {                            Text(\"Add extra frosting\")                        }                                                Toggle(isOn: $order.addSprinkles) {                            Text(\"Add extra sprinkels\")                        }                    }                }                                Section {                    NavigationLink(destination: AddressView(order: order)) {                        Text(\"Delivery details\")                    }                }            }            .navigationBarTitle(\"Cupcake Corner\")        }    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  AddressView.swift//  CupcakeCorner//import SwiftUIstruct AddressView: View {    @ObservedObject var order: Order        var body: some View {        Form {            Section {                TextField(\"Name\", text: $order.name)                TextField(\"Street Address\", text: $order.streetAddress)                TextField(\"City\", text: $order.city)                TextField(\"Zip\", text: $order.zip)            }                        Section {                NavigationLink(destination: CheckoutView(order: order)) {                    Text(\"Check out\")                }            }            .disabled(order.hasValidAddress == false)        }        .navigationBarTitle(\"Delivery details\", displayMode: .inline)    }}struct AddressView_Previews: PreviewProvider {    static var previews: some View {        AddressView(order: Order())    }}////  CheckoutView.swift//  CupcakeCorner//import SwiftUIstruct CheckoutView: View {    @ObservedObject var order: Order        @State private var confirmationMessage = \"\"    @State private var showingConfirmation = false    @State private var orderPlaced = false        var alertTitle: String {        return orderPlaced ? \"Thank you!\" : \"Failed to send order\"    }    var alertMessage: String {        return orderPlaced ? confirmationMessage : \"Please try again\"    }        func placeOrder() {        guard let encoded = try? JSONEncoder().encode(order) else {            print(\"Failed to encode order\")            return        }                let url = URL(string: \"https://reqres.in/api/cupcakes\")!        var request = URLRequest(url: url)        request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")        request.httpMethod = \"POST\"        request.httpBody = encoded                URLSession.shared.dataTask(with: request) { data, response, error in            guard let data = data else {                print(\"No data in response: \\(error?.localizedDescription ?? \"Unknow error\")\")                self.showingConfirmation = true                return            }            if let decodedOrder = try? JSONDecoder().decode(Order.self, from: data) {                self.confirmationMessage = \"Your order for \\(decodedOrder.quantity)x \\(Order.types[decodedOrder.type].lowercased()) cupcakes is on its way!\"                self.orderPlaced = true            } else {                print(\"Invalid response from server\")            }            self.showingConfirmation = true        }.resume()            }        var body: some View {        GeometryReader { geo in            ScrollView {                VStack {                    Image(\"cupcakes\")                        .resizable()                        .scaledToFit()                        .frame(width: geo.size.width)                                        Text(\"Your total is $\\(order.cost, specifier: \"%.2f\")\")                        .font(.title)                                        Button(\"Place Order\") {                        placeOrder()                    }                    .padding()                }            }        }        .navigationBarTitle(\"Check out\", displayMode: .inline)        .alert(isPresented: $showingConfirmation, content: {            Alert(title: Text(alertTitle), message: Text(alertMessage), dismissButton: .default(Text(\"OK\")))        })    }}struct CheckoutView_Previews: PreviewProvider {    static var previews: some View {        CheckoutView(order: Order())    }}////  Order.swift//  CupcakeCorner//import Foundationclass Order: ObservableObject, Codable {    static let types = [\"Vanilla\", \"Strawberry\", \"Chocolate\", \"Rainbow\"]        @Published var type = 0    @Published var quantity = 3    @Published var extraFrosting = false    @Published var addSprinkles = false        @Published var name = \"\"    @Published var streetAddress = \"\"    @Published var city = \"\"    @Published var zip = \"\"        @Published var specialRequestEnabled = false {        didSet {            if specialRequestEnabled == false {                extraFrosting = false                addSprinkles = false            }        }    }        var hasValidAddress: Bool {        if name.trimmingCharacters(in: .whitespaces).isEmpty ||            streetAddress.trimmingCharacters(in: .whitespaces).isEmpty ||            city.trimmingCharacters(in: .whitespaces).isEmpty ||            zip.trimmingCharacters(in: .whitespaces).isEmpty {            return false        }        return true    }        var cost: Double {        // $2 per cake        var cost = Double(quantity) * 2        // complicated cakes cost more        cost += (Double(type) / 2)        // $1/cake for extra frosting        if extraFrosting {            cost += Double(quantity)        }        // $0.50/cake for sprinkles        if addSprinkles {            cost += Double(quantity) / 2        }        return cost    }        enum CodingKeys: CodingKey {        case type, quantity, extraFrosting, addSprinkles, name, streetAddress, city, zip    }        func encode(to encoder: Encoder) throws {        var container = encoder.container(keyedBy: CodingKeys.self)                try container.encode(type, forKey: .type)        try container.encode(quantity, forKey: .quantity)        try container.encode(extraFrosting, forKey: .extraFrosting)        try container.encode(addSprinkles, forKey: .addSprinkles)        try container.encode(name, forKey: .name)        try container.encode(streetAddress, forKey: .streetAddress)        try container.encode(city, forKey: .city)        try container.encode(zip, forKey: .zip)    }        required init(from decoder: Decoder) throws {        let container = try decoder.container(keyedBy: CodingKeys.self)                type = try container.decode(Int.self, forKey: .type)        quantity = try container.decode(Int.self, forKey: .quantity)        extraFrosting = try container.decode(Bool.self, forKey: .extraFrosting)        addSprinkles = try container.decode(Bool.self, forKey: .addSprinkles)        name = try container.decode(String.self, forKey: .name)        streetAddress = try container.decode(String.self, forKey: .streetAddress)        city = try container.decode(String.self, forKey: .city)        zip = try container.decode(String.self, forKey: .zip)    }        init() {}    }",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>URLSession.shared.dataTask</li>  <li>JSONEncoder/JSONDecoder</li>  <li>GeometryReader</li>  <li>Codable</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li>If a Swift struct is made up only of properties that conform to <code class=\"highlighter-rouge\">Codable</code>, the whole struct itself can conform to <code class=\"highlighter-rouge\">Codable</code></li>  <li>Grand Central Dispatch is Apple’s framework for running work across multiple threads</li>  <li>We can create an enum to give a type some specific coding keys, and name the enum whatever we want</li>  <li>Swifts arrays use generics and we can’t make an untyped array</li>  <li>The <code class=\"highlighter-rouge\">@Published</code> property wrapper places our properties inside a <code class=\"highlighter-rouge\">Published</code> struct. Behind the scenes, this is actually similar to how optionals work</li>  <li>Creating a <code class=\"highlighter-rouge\">URL</code> from a string returns an optional URL</li>  <li>Strings, integers, and Booleans already conform to <code class=\"highlighter-rouge\">Codable</code></li>  <li><code class=\"highlighter-rouge\">URLRequest</code> doesn’t fetch anything; it just describes how data should be fetched</li>  <li>The <code class=\"highlighter-rouge\">CodingKey</code> protocol lets us list the properties we want to archive and unarchive as <code class=\"highlighter-rouge\">enum</code> cases</li>  <li>Structs cannot be used with <code class=\"highlighter-rouge\">@ObservedObject</code></li>  <li>We should always change our user interface on the main thread</li>  <li>It’s common to use the shared property of <code class=\"highlighter-rouge\">URLSession</code> rather than creating a new session ourselves</li>  <li>If the properties already have default values, you don’t need to include them in the initializer</li>  <li>When a <code class=\"highlighter-rouge\">URLSession</code> data task completes, it might send us data or an error, but not both</li></ol><h3 id=\"code\">Code</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  CupcakeCorner</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">order</span> <span class=\"o\">=</span> <span class=\"kt\">Order</span><span class=\"p\">()</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">Form</span> <span class=\"p\">{</span>                <span class=\"kt\">Section</span> <span class=\"p\">{</span>                    <span class=\"kt\">Picker</span><span class=\"p\">(</span><span class=\"s\">\"Select your cake type\"</span><span class=\"p\">,</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..&lt;</span><span class=\"kt\">Order</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"kt\">Order</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"nv\">$0</span><span class=\"p\">])</span>                        <span class=\"p\">}</span>                    <span class=\"p\">}</span>                                        <span class=\"kt\">Stepper</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"p\">,</span> <span class=\"nv\">in</span> <span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"o\">...</span><span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Number of cakes: </span><span class=\"se\">\\(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                                <span class=\"kt\">Section</span> <span class=\"p\">{</span>                    <span class=\"kt\">Toggle</span><span class=\"p\">(</span><span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">specialRequestEnabled</span><span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">())</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Any special requests?\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                                        <span class=\"k\">if</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">specialRequestEnabled</span> <span class=\"p\">{</span>                        <span class=\"kt\">Toggle</span><span class=\"p\">(</span><span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">extraFrosting</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Add extra frosting\"</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                                                <span class=\"kt\">Toggle</span><span class=\"p\">(</span><span class=\"nv\">isOn</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">addSprinkles</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Add extra sprinkels\"</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                                <span class=\"kt\">Section</span> <span class=\"p\">{</span>                    <span class=\"kt\">NavigationLink</span><span class=\"p\">(</span><span class=\"nv\">destination</span><span class=\"p\">:</span> <span class=\"kt\">AddressView</span><span class=\"p\">(</span><span class=\"nv\">order</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"p\">))</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Delivery details\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Cupcake Corner\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  AddressView.swift</span><span class=\"c1\">//  CupcakeCorner</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">AddressView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">order</span><span class=\"p\">:</span> <span class=\"kt\">Order</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">Form</span> <span class=\"p\">{</span>            <span class=\"kt\">Section</span> <span class=\"p\">{</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Name\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Street Address\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">streetAddress</span><span class=\"p\">)</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"City\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">city</span><span class=\"p\">)</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Zip\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">)</span>            <span class=\"p\">}</span>                        <span class=\"kt\">Section</span> <span class=\"p\">{</span>                <span class=\"kt\">NavigationLink</span><span class=\"p\">(</span><span class=\"nv\">destination</span><span class=\"p\">:</span> <span class=\"kt\">CheckoutView</span><span class=\"p\">(</span><span class=\"nv\">order</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"p\">))</span> <span class=\"p\">{</span>                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Check out\"</span><span class=\"p\">)</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">disabled</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">hasValidAddress</span> <span class=\"o\">==</span> <span class=\"kc\">false</span><span class=\"p\">)</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Delivery details\"</span><span class=\"p\">,</span> <span class=\"nv\">displayMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">AddressView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">AddressView</span><span class=\"p\">(</span><span class=\"nv\">order</span><span class=\"p\">:</span> <span class=\"kt\">Order</span><span class=\"p\">())</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  CheckoutView.swift</span><span class=\"c1\">//  CupcakeCorner</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">CheckoutView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">order</span><span class=\"p\">:</span> <span class=\"kt\">Order</span>        <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">confirmationMessage</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingConfirmation</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">orderPlaced</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">alertTitle</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">orderPlaced</span> <span class=\"p\">?</span> <span class=\"s\">\"Thank you!\"</span> <span class=\"p\">:</span> <span class=\"s\">\"Failed to send order\"</span>    <span class=\"p\">}</span>    <span class=\"k\">var</span> <span class=\"nv\">alertMessage</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>        <span class=\"k\">return</span> <span class=\"n\">orderPlaced</span> <span class=\"p\">?</span> <span class=\"nv\">confirmationMessage</span> <span class=\"p\">:</span> <span class=\"s\">\"Please try again\"</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">placeOrder</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">encoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Failed to encode order\"</span><span class=\"p\">)</span>            <span class=\"k\">return</span>        <span class=\"p\">}</span>                <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"s\">\"https://reqres.in/api/cupcakes\"</span><span class=\"p\">)</span><span class=\"o\">!</span>        <span class=\"k\">var</span> <span class=\"nv\">request</span> <span class=\"o\">=</span> <span class=\"kt\">URLRequest</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">)</span>        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"nf\">setValue</span><span class=\"p\">(</span><span class=\"s\">\"application/json\"</span><span class=\"p\">,</span> <span class=\"nv\">forHTTPHeaderField</span><span class=\"p\">:</span> <span class=\"s\">\"Content-Type\"</span><span class=\"p\">)</span>        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">httpMethod</span> <span class=\"o\">=</span> <span class=\"s\">\"POST\"</span>        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">httpBody</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span>                <span class=\"kt\">URLSession</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"nf\">dataTask</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"k\">in</span>            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"No data in response: </span><span class=\"se\">\\(</span><span class=\"n\">error</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span> <span class=\"p\">??</span> <span class=\"s\">\"Unknow error\"</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingConfirmation</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                <span class=\"k\">return</span>            <span class=\"p\">}</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">decodedOrder</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">Order</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">confirmationMessage</span> <span class=\"o\">=</span> <span class=\"s\">\"Your order for </span><span class=\"se\">\\(</span><span class=\"n\">decodedOrder</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"se\">)</span><span class=\"s\">x </span><span class=\"se\">\\(</span><span class=\"kt\">Order</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"n\">decodedOrder</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"nf\">lowercased</span><span class=\"p\">()</span><span class=\"se\">)</span><span class=\"s\"> cupcakes is on its way!\"</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">orderPlaced</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Invalid response from server\"</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingConfirmation</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">resume</span><span class=\"p\">()</span>            <span class=\"p\">}</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">GeometryReader</span> <span class=\"p\">{</span> <span class=\"n\">geo</span> <span class=\"k\">in</span>            <span class=\"kt\">ScrollView</span> <span class=\"p\">{</span>                <span class=\"kt\">VStack</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"s\">\"cupcakes\"</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">geo</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span>                                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Your total is $</span><span class=\"se\">\\(</span><span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">cost</span><span class=\"p\">,</span> <span class=\"nv\">specifier</span><span class=\"p\">:</span> <span class=\"s\">\"%.2f\"</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>                                        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Place Order\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"nf\">placeOrder</span><span class=\"p\">()</span>                    <span class=\"p\">}</span>                    <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Check out\"</span><span class=\"p\">,</span> <span class=\"nv\">displayMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingConfirmation</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>            <span class=\"kt\">Alert</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">alertTitle</span><span class=\"p\">),</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">alertMessage</span><span class=\"p\">),</span> <span class=\"nv\">dismissButton</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"OK\"</span><span class=\"p\">)))</span>        <span class=\"p\">})</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">CheckoutView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">CheckoutView</span><span class=\"p\">(</span><span class=\"nv\">order</span><span class=\"p\">:</span> <span class=\"kt\">Order</span><span class=\"p\">())</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  Order.swift</span><span class=\"c1\">//  CupcakeCorner</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span><span class=\"kd\">class</span> <span class=\"kt\">Order</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span><span class=\"p\">,</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Vanilla\"</span><span class=\"p\">,</span> <span class=\"s\">\"Strawberry\"</span><span class=\"p\">,</span> <span class=\"s\">\"Chocolate\"</span><span class=\"p\">,</span> <span class=\"s\">\"Rainbow\"</span><span class=\"p\">]</span>        <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">type</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">quantity</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">extraFrosting</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">addSprinkles</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">streetAddress</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">city</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">zip</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>        <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">specialRequestEnabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span> <span class=\"p\">{</span>        <span class=\"k\">didSet</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"n\">specialRequestEnabled</span> <span class=\"o\">==</span> <span class=\"kc\">false</span> <span class=\"p\">{</span>                <span class=\"n\">extraFrosting</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>                <span class=\"n\">addSprinkles</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"k\">var</span> <span class=\"nv\">hasValidAddress</span><span class=\"p\">:</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"nf\">trimmingCharacters</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">whitespaces</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">||</span>            <span class=\"n\">streetAddress</span><span class=\"o\">.</span><span class=\"nf\">trimmingCharacters</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">whitespaces</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">||</span>            <span class=\"n\">city</span><span class=\"o\">.</span><span class=\"nf\">trimmingCharacters</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">whitespaces</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"o\">||</span>            <span class=\"n\">zip</span><span class=\"o\">.</span><span class=\"nf\">trimmingCharacters</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">whitespaces</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"kc\">false</span>        <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"kc\">true</span>    <span class=\"p\">}</span>        <span class=\"k\">var</span> <span class=\"nv\">cost</span><span class=\"p\">:</span> <span class=\"kt\">Double</span> <span class=\"p\">{</span>        <span class=\"c1\">// $2 per cake</span>        <span class=\"k\">var</span> <span class=\"nv\">cost</span> <span class=\"o\">=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>        <span class=\"c1\">// complicated cakes cost more</span>        <span class=\"n\">cost</span> <span class=\"o\">+=</span> <span class=\"p\">(</span><span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span><span class=\"p\">)</span>        <span class=\"c1\">// $1/cake for extra frosting</span>        <span class=\"k\">if</span> <span class=\"n\">extraFrosting</span> <span class=\"p\">{</span>            <span class=\"n\">cost</span> <span class=\"o\">+=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span>        <span class=\"p\">}</span>        <span class=\"c1\">// $0.50/cake for sprinkles</span>        <span class=\"k\">if</span> <span class=\"n\">addSprinkles</span> <span class=\"p\">{</span>            <span class=\"n\">cost</span> <span class=\"o\">+=</span> <span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>        <span class=\"p\">}</span>        <span class=\"k\">return</span> <span class=\"n\">cost</span>    <span class=\"p\">}</span>        <span class=\"kd\">enum</span> <span class=\"kt\">CodingKeys</span><span class=\"p\">:</span> <span class=\"kt\">CodingKey</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">quantity</span><span class=\"p\">,</span> <span class=\"n\">extraFrosting</span><span class=\"p\">,</span> <span class=\"n\">addSprinkles</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">streetAddress</span><span class=\"p\">,</span> <span class=\"n\">city</span><span class=\"p\">,</span> <span class=\"n\">zip</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">to</span> <span class=\"nv\">encoder</span><span class=\"p\">:</span> <span class=\"kt\">Encoder</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>        <span class=\"k\">var</span> <span class=\"nv\">container</span> <span class=\"o\">=</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"nf\">container</span><span class=\"p\">(</span><span class=\"nv\">keyedBy</span><span class=\"p\">:</span> <span class=\"kt\">CodingKeys</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>                <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">extraFrosting</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">extraFrosting</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">addSprinkles</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">addSprinkles</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">streetAddress</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">streetAddress</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">city</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">city</span><span class=\"p\">)</span>        <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">zip</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">decoder</span><span class=\"p\">:</span> <span class=\"kt\">Decoder</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">container</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">container</span><span class=\"p\">(</span><span class=\"nv\">keyedBy</span><span class=\"p\">:</span> <span class=\"kt\">CodingKeys</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>                <span class=\"n\">type</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span>        <span class=\"n\">quantity</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">Int</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"p\">)</span>        <span class=\"n\">extraFrosting</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">extraFrosting</span><span class=\"p\">)</span>        <span class=\"n\">addSprinkles</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">Bool</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">addSprinkles</span><span class=\"p\">)</span>        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>        <span class=\"n\">streetAddress</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">streetAddress</span><span class=\"p\">)</span>        <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">city</span><span class=\"p\">)</span>        <span class=\"n\">zip</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zip</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{}</span>    <span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/CupcakeCorner",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-11-01T00:00:00-04:00",
            "date_modified": "2020-11-01T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/Moonshot",
            "title": "Moonshot",
            "summary": "Teach users about space history with scroll views, Codable, and more",
            "content_text": "Keywords  GeometryReader  Bundle.main.decode  Codable  NavigationLink  View init  DateFormmaterKeynotes  GeometryReader lets us read the size of a view’s container  Before trying to stretch the contents of an image view, we should use resizable()  Higher layout priority values mean views are more likely to be allocated space in their container  Codable is capable of working with structs within structs as long as our Swift code matches the source data  aspectRatio(contentMode: .fit) is the same as scaledToFit()  The first(where:) method returns the first object that matches a predicate  We can control the way SwiftUI highlights navigation links using the buttonStyle() modifier  We can make a scroll view take up all available screen width by using frame(maxWidth: .infinity)  The .fill content mode means that no part of the image view is empty. It might mean parts of an image lie outside its container’s frame  We can use Spacer(minLength:) to force a spacer to be at least a certain width/heightCode////  ContentView.swift//  Moonshot//import SwiftUIstruct ContentView: View {    let astronauts: [Astronaut] = Bundle.main.decode(\"astronauts.json\")    let missions: [Mission] = Bundle.main.decode(\"missions.json\")        var body: some View {        NavigationView {            List(missions) { mission in                NavigationLink(destination: MissionView(mission: mission, astronauts: self.astronauts)) {                    Image(mission.image)                        .resizable()                        .scaledToFit()                        .frame(width: 44, height: 44)                                        VStack(alignment: .leading) {                        Text(mission.displayName)                            .font(.headline)                        Text(mission.formattedLaunchDate)                    }                }            }            .navigationBarTitle(\"Moonshot\")        }    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  MissionView.swift//  Moonshot//import SwiftUIstruct CrewMember {    let role: String    let astronaut: Astronaut}struct MissionView: View {    let mission: Mission    let astronauts: [CrewMember]        var body: some View {        GeometryReader { geometry in            ScrollView(.vertical) {                VStack {                    Image(mission.image)                        .resizable()                        .scaledToFit()                        .frame(maxWidth: geometry.size.width * 0.7)                        .padding(.top)                                        Text(mission.formattedLaunchDate)                                        Text(mission.description)                        .padding()                                        ForEach(self.astronauts, id: \\.role) { crewMember in                        NavigationLink(destination: AstronautView(astronaut: crewMember.astronaut)) {                            HStack {                                Image(crewMember.astronaut.id)                                    .resizable()                                    .frame(width: 83, height: 60)                                    .clipShape(Capsule())                                    .overlay(Capsule().stroke(Color.primary, lineWidth: 1))                                                                VStack(alignment: .leading) {                                    Text(crewMember.astronaut.name)                                        .font(.headline)                                    Text(crewMember.role)                                        .foregroundColor(.secondary)                                }                                Spacer()                            }                            .padding(.horizontal)                        }                        .buttonStyle(PlainButtonStyle())                    }                                        Spacer(minLength: 25)                }            }        }        .navigationBarTitle(Text(mission.displayName), displayMode: .inline)    }        init(mission: Mission, astronauts: [Astronaut]) {        self.mission = mission                var matches = [CrewMember]()                for member in mission.crew {            if let match = astronauts.first(where: { $0.id == member.name }) {                matches.append(CrewMember(role: member.role, astronaut: match))            } else {                fatalError(\"Missing \\(member)\")            }        }                self.astronauts = matches    }}struct MissionView_Previews: PreviewProvider {    static let missions: [Mission] = Bundle.main.decode(\"missions.json\")    static let astronants: [Astronaut] = Bundle.main.decode(\"astronauts.json\")        static var previews: some View {        MissionView(mission: missions[1], astronauts: astronants)    }}////  AstronautView.swift//  Moonshot//import SwiftUIstruct MissionWithRole {    let missionId: Int    let role: String}struct AstronautView: View {    let astronaut: Astronaut    let missions: [Mission]    let missionsWithRole: [MissionWithRole]        var body: some View {        GeometryReader { geometry in            ScrollView(.vertical) {                VStack(alignment: .leading) {                    Image(astronaut.id)                        .resizable()                        .scaledToFit()                        .frame(width: geometry.size.width)                                        Text(astronaut.description)                        .padding()                                        ForEach(self.missions) { mission in                        HStack {                            Image(mission.image)                                .resizable()                                .frame(width: 50, height: 50)                                                        VStack(alignment: .leading) {                                Text(mission.displayName)                                    .font(.headline)                                Text(missionsWithRole.first(where: { $0.missionId == mission.id })!                                        .role)                            }                        }                        .padding(.horizontal)                    }                }            }        }        .navigationBarTitle(Text(astronaut.name), displayMode: .inline)    }        init(astronaut: Astronaut) {        self.astronaut = astronaut                let allMissions: [Mission] = Bundle.main.decode(\"missions.json\")        var matches = [Mission]()        var missionsWithRole = [MissionWithRole]()                for mission in allMissions {            var findAstronautInMissionCrew = false            for crew in mission.crew {                if self.astronaut.id == crew.name {                    findAstronautInMissionCrew = true                    missionsWithRole.append(MissionWithRole(missionId: mission.id, role: crew.role))                }            }            if findAstronautInMissionCrew {                matches.append(mission)            }        }                self.missions = matches        self.missionsWithRole = missionsWithRole    }}struct AstronautView_Previews: PreviewProvider {    static let astronauts: [Astronaut] = Bundle.main.decode(\"astronauts.json\")        static var previews: some View {        AstronautView(astronaut: astronauts[7])    }}////  Mission.swift//  Moonshot//import Foundationstruct Mission: Codable, Identifiable {    struct CrewRole: Codable {        let name: String        let role: String    }        let id: Int    let launchDate: Date?    let crew: [CrewRole]    let description: String        var displayName: String {        \"Apollo \\(id)\"    }        var image: String {        \"apollo\\(id)\"    }        var formattedLaunchDate: String {        if let launchDate = launchDate {            let formatter = DateFormatter()            formatter.dateStyle = .long            return formatter.string(from: launchDate)        } else {            return \"N/A\"        }    }}////  Astronaut.swift//  Moonshot//import Foundationstruct Astronaut: Codable, Identifiable {    let id: String    let name: String    let description: String}////  Bundle-Decodable.swift//  Moonshot////import Foundationextension Bundle {    func decode&lt;T: Codable&gt;(_ file: String) -&gt; T {        guard let url = self.url(forResource: file, withExtension: nil) else {            fatalError(\"Failed to locate \\(file) in bundle.\")        }                guard let data = try? Data(contentsOf: url) else {            fatalError(\"Failed to load \\(file) from bundle.\")        }                let decoder = JSONDecoder()        let formatter = DateFormatter()        formatter.dateFormat = \"y-MM-dd\"        decoder.dateDecodingStrategy = .formatted(formatter)                guard let loaded = try? decoder.decode(T.self, from: data) else {            fatalError(\"Failed to decode \\(file) from bundle.\")        }                return loaded    }}",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>GeometryReader</li>  <li>Bundle.main.decode</li>  <li>Codable</li>  <li>NavigationLink</li>  <li>View init</li>  <li>DateFormmater</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li><code class=\"highlighter-rouge\">GeometryReader</code> lets us read the size of a view’s container</li>  <li>Before trying to stretch the contents of an image view, we should use <code class=\"highlighter-rouge\">resizable()</code></li>  <li>Higher layout priority values mean views are more likely to be allocated space in their container</li>  <li><code class=\"highlighter-rouge\">Codable</code> is capable of working with structs within structs as long as our Swift code matches the source data</li>  <li><code class=\"highlighter-rouge\">aspectRatio(contentMode: .fit)</code> is the same as <code class=\"highlighter-rouge\">scaledToFit()</code></li>  <li>The <code class=\"highlighter-rouge\">first(where:)</code> method returns the first object that matches a predicate</li>  <li>We can control the way SwiftUI highlights navigation links using the <code class=\"highlighter-rouge\">buttonStyle()</code> modifier</li>  <li>We can make a scroll view take up all available screen width by using <code class=\"highlighter-rouge\">frame(maxWidth: .infinity)</code></li>  <li>The <code class=\"highlighter-rouge\">.fill</code> content mode means that no part of the image view is empty. It might mean parts of an image lie outside its container’s frame</li>  <li>We can use <code class=\"highlighter-rouge\">Spacer(minLength:)</code> to force a spacer to be at least a certain width/height</li></ol><h3 id=\"code\">Code</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  Moonshot</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">astronauts</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Astronaut</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"s\">\"astronauts.json\"</span><span class=\"p\">)</span>    <span class=\"k\">let</span> <span class=\"nv\">missions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Mission</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"s\">\"missions.json\"</span><span class=\"p\">)</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"n\">missions</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">mission</span> <span class=\"k\">in</span>                <span class=\"kt\">NavigationLink</span><span class=\"p\">(</span><span class=\"nv\">destination</span><span class=\"p\">:</span> <span class=\"kt\">MissionView</span><span class=\"p\">(</span><span class=\"nv\">mission</span><span class=\"p\">:</span> <span class=\"n\">mission</span><span class=\"p\">,</span> <span class=\"nv\">astronauts</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">astronauts</span><span class=\"p\">))</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">)</span>                                        <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">displayName</span><span class=\"p\">)</span>                            <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">formattedLaunchDate</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Moonshot\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  MissionView.swift</span><span class=\"c1\">//  Moonshot</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">CrewMember</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">astronaut</span><span class=\"p\">:</span> <span class=\"kt\">Astronaut</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">MissionView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">mission</span><span class=\"p\">:</span> <span class=\"kt\">Mission</span>    <span class=\"k\">let</span> <span class=\"nv\">astronauts</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">CrewMember</span><span class=\"p\">]</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">GeometryReader</span> <span class=\"p\">{</span> <span class=\"n\">geometry</span> <span class=\"k\">in</span>            <span class=\"kt\">ScrollView</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"kt\">VStack</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"mf\">0.7</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">top</span><span class=\"p\">)</span>                                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">formattedLaunchDate</span><span class=\"p\">)</span>                                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>                                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">astronauts</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">crewMember</span> <span class=\"k\">in</span>                        <span class=\"kt\">NavigationLink</span><span class=\"p\">(</span><span class=\"nv\">destination</span><span class=\"p\">:</span> <span class=\"kt\">AstronautView</span><span class=\"p\">(</span><span class=\"nv\">astronaut</span><span class=\"p\">:</span> <span class=\"n\">crewMember</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"p\">))</span> <span class=\"p\">{</span>                            <span class=\"kt\">HStack</span> <span class=\"p\">{</span>                                <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"n\">crewMember</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>                                    <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                                    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">60</span><span class=\"p\">)</span>                                    <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Capsule</span><span class=\"p\">())</span>                                    <span class=\"o\">.</span><span class=\"nf\">overlay</span><span class=\"p\">(</span><span class=\"kt\">Capsule</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">primary</span><span class=\"p\">,</span> <span class=\"nv\">lineWidth</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span>                                                                <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">crewMember</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>                                        <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">crewMember</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"p\">)</span>                                        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>                                <span class=\"p\">}</span>                                <span class=\"kt\">Spacer</span><span class=\"p\">()</span>                            <span class=\"p\">}</span>                            <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                        <span class=\"o\">.</span><span class=\"nf\">buttonStyle</span><span class=\"p\">(</span><span class=\"kt\">PlainButtonStyle</span><span class=\"p\">())</span>                    <span class=\"p\">}</span>                                        <span class=\"kt\">Spacer</span><span class=\"p\">(</span><span class=\"nv\">minLength</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">)</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">displayName</span><span class=\"p\">),</span> <span class=\"nv\">displayMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">mission</span><span class=\"p\">:</span> <span class=\"kt\">Mission</span><span class=\"p\">,</span> <span class=\"nv\">astronauts</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Astronaut</span><span class=\"p\">])</span> <span class=\"p\">{</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">mission</span> <span class=\"o\">=</span> <span class=\"n\">mission</span>                <span class=\"k\">var</span> <span class=\"nv\">matches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">CrewMember</span><span class=\"p\">]()</span>                <span class=\"k\">for</span> <span class=\"n\">member</span> <span class=\"k\">in</span> <span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">crew</span> <span class=\"p\">{</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">match</span> <span class=\"o\">=</span> <span class=\"n\">astronauts</span><span class=\"o\">.</span><span class=\"nf\">first</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">})</span> <span class=\"p\">{</span>                <span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"kt\">CrewMember</span><span class=\"p\">(</span><span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"p\">,</span> <span class=\"nv\">astronaut</span><span class=\"p\">:</span> <span class=\"n\">match</span><span class=\"p\">))</span>            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                <span class=\"nf\">fatalError</span><span class=\"p\">(</span><span class=\"s\">\"Missing </span><span class=\"se\">\\(</span><span class=\"n\">member</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">astronauts</span> <span class=\"o\">=</span> <span class=\"n\">matches</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">MissionView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">missions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Mission</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"s\">\"missions.json\"</span><span class=\"p\">)</span>    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">astronants</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Astronaut</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"s\">\"astronauts.json\"</span><span class=\"p\">)</span>        <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">MissionView</span><span class=\"p\">(</span><span class=\"nv\">mission</span><span class=\"p\">:</span> <span class=\"n\">missions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"nv\">astronauts</span><span class=\"p\">:</span> <span class=\"n\">astronants</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  AstronautView.swift</span><span class=\"c1\">//  Moonshot</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">MissionWithRole</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">missionId</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>    <span class=\"k\">let</span> <span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">AstronautView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">astronaut</span><span class=\"p\">:</span> <span class=\"kt\">Astronaut</span>    <span class=\"k\">let</span> <span class=\"nv\">missions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Mission</span><span class=\"p\">]</span>    <span class=\"k\">let</span> <span class=\"nv\">missionsWithRole</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">MissionWithRole</span><span class=\"p\">]</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">GeometryReader</span> <span class=\"p\">{</span> <span class=\"n\">geometry</span> <span class=\"k\">in</span>            <span class=\"kt\">ScrollView</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"n\">astronaut</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">scaledToFit</span><span class=\"p\">()</span>                        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">)</span>                                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">astronaut</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>                                        <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">missions</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">mission</span> <span class=\"k\">in</span>                        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>                            <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>                                <span class=\"o\">.</span><span class=\"nf\">resizable</span><span class=\"p\">()</span>                                <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">)</span>                                                        <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">displayName</span><span class=\"p\">)</span>                                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">missionsWithRole</span><span class=\"o\">.</span><span class=\"nf\">first</span><span class=\"p\">(</span><span class=\"nv\">where</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">missionId</span> <span class=\"o\">==</span> <span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"p\">})</span><span class=\"o\">!</span>                                        <span class=\"o\">.</span><span class=\"n\">role</span><span class=\"p\">)</span>                            <span class=\"p\">}</span>                        <span class=\"p\">}</span>                        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">astronaut</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span> <span class=\"nv\">displayMode</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">inline</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">astronaut</span><span class=\"p\">:</span> <span class=\"kt\">Astronaut</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">astronaut</span> <span class=\"o\">=</span> <span class=\"n\">astronaut</span>                <span class=\"k\">let</span> <span class=\"nv\">allMissions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Mission</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"s\">\"missions.json\"</span><span class=\"p\">)</span>        <span class=\"k\">var</span> <span class=\"nv\">matches</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">Mission</span><span class=\"p\">]()</span>        <span class=\"k\">var</span> <span class=\"nv\">missionsWithRole</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">MissionWithRole</span><span class=\"p\">]()</span>                <span class=\"k\">for</span> <span class=\"n\">mission</span> <span class=\"k\">in</span> <span class=\"n\">allMissions</span> <span class=\"p\">{</span>            <span class=\"k\">var</span> <span class=\"nv\">findAstronautInMissionCrew</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>            <span class=\"k\">for</span> <span class=\"n\">crew</span> <span class=\"k\">in</span> <span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">crew</span> <span class=\"p\">{</span>                <span class=\"k\">if</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">astronaut</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">crew</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">{</span>                    <span class=\"n\">findAstronautInMissionCrew</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                    <span class=\"n\">missionsWithRole</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"kt\">MissionWithRole</span><span class=\"p\">(</span><span class=\"nv\">missionId</span><span class=\"p\">:</span> <span class=\"n\">mission</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"n\">crew</span><span class=\"o\">.</span><span class=\"n\">role</span><span class=\"p\">))</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>            <span class=\"k\">if</span> <span class=\"n\">findAstronautInMissionCrew</span> <span class=\"p\">{</span>                <span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">mission</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">missions</span> <span class=\"o\">=</span> <span class=\"n\">matches</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">missionsWithRole</span> <span class=\"o\">=</span> <span class=\"n\">missionsWithRole</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">AstronautView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">astronauts</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Astronaut</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"s\">\"astronauts.json\"</span><span class=\"p\">)</span>        <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">AstronautView</span><span class=\"p\">(</span><span class=\"nv\">astronaut</span><span class=\"p\">:</span> <span class=\"n\">astronauts</span><span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">])</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  Mission.swift</span><span class=\"c1\">//  Moonshot</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span><span class=\"kd\">struct</span> <span class=\"kt\">Mission</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span><span class=\"p\">,</span> <span class=\"kt\">Identifiable</span> <span class=\"p\">{</span>    <span class=\"kd\">struct</span> <span class=\"kt\">CrewRole</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>        <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>        <span class=\"k\">let</span> <span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"p\">}</span>        <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>    <span class=\"k\">let</span> <span class=\"nv\">launchDate</span><span class=\"p\">:</span> <span class=\"kt\">Date</span><span class=\"p\">?</span>    <span class=\"k\">let</span> <span class=\"nv\">crew</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">CrewRole</span><span class=\"p\">]</span>    <span class=\"k\">let</span> <span class=\"nv\">description</span><span class=\"p\">:</span> <span class=\"kt\">String</span>        <span class=\"k\">var</span> <span class=\"nv\">displayName</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>        <span class=\"s\">\"Apollo </span><span class=\"se\">\\(</span><span class=\"n\">id</span><span class=\"se\">)</span><span class=\"s\">\"</span>    <span class=\"p\">}</span>        <span class=\"k\">var</span> <span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>        <span class=\"s\">\"apollo</span><span class=\"se\">\\(</span><span class=\"n\">id</span><span class=\"se\">)</span><span class=\"s\">\"</span>    <span class=\"p\">}</span>        <span class=\"k\">var</span> <span class=\"nv\">formattedLaunchDate</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">launchDate</span> <span class=\"o\">=</span> <span class=\"n\">launchDate</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">formatter</span> <span class=\"o\">=</span> <span class=\"kt\">DateFormatter</span><span class=\"p\">()</span>            <span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"n\">dateStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">long</span>            <span class=\"k\">return</span> <span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"nf\">string</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">launchDate</span><span class=\"p\">)</span>        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"k\">return</span> <span class=\"s\">\"N/A\"</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  Astronaut.swift</span><span class=\"c1\">//  Moonshot</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span><span class=\"kd\">struct</span> <span class=\"kt\">Astronaut</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span><span class=\"p\">,</span> <span class=\"kt\">Identifiable</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">description</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  Bundle-Decodable.swift</span><span class=\"c1\">//  Moonshot</span><span class=\"c1\">//</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span><span class=\"kd\">extension</span> <span class=\"kt\">Bundle</span> <span class=\"p\">{</span>    <span class=\"kd\">func</span> <span class=\"n\">decode</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">file</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">T</span> <span class=\"p\">{</span>        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"nv\">forResource</span><span class=\"p\">:</span> <span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"nv\">withExtension</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"nf\">fatalError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to locate </span><span class=\"se\">\\(</span><span class=\"n\">file</span><span class=\"se\">)</span><span class=\"s\"> in bundle.\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">Data</span><span class=\"p\">(</span><span class=\"nv\">contentsOf</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"nf\">fatalError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to load </span><span class=\"se\">\\(</span><span class=\"n\">file</span><span class=\"se\">)</span><span class=\"s\"> from bundle.\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>                <span class=\"k\">let</span> <span class=\"nv\">decoder</span> <span class=\"o\">=</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span>        <span class=\"k\">let</span> <span class=\"nv\">formatter</span> <span class=\"o\">=</span> <span class=\"kt\">DateFormatter</span><span class=\"p\">()</span>        <span class=\"n\">formatter</span><span class=\"o\">.</span><span class=\"n\">dateFormat</span> <span class=\"o\">=</span> <span class=\"s\">\"y-MM-dd\"</span>        <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">dateDecodingStrategy</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"nf\">formatted</span><span class=\"p\">(</span><span class=\"n\">formatter</span><span class=\"p\">)</span>                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">loaded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>            <span class=\"nf\">fatalError</span><span class=\"p\">(</span><span class=\"s\">\"Failed to decode </span><span class=\"se\">\\(</span><span class=\"n\">file</span><span class=\"se\">)</span><span class=\"s\"> from bundle.\"</span><span class=\"p\">)</span>        <span class=\"p\">}</span>                <span class=\"k\">return</span> <span class=\"n\">loaded</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/Moonshot",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-10-21T00:00:00-04:00",
            "date_modified": "2020-10-21T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/iExpense",
            "title": "iExpense",
            "summary": "Bring in a second view with this expense tracking app",
            "content_text": "Keywords  UserDefaults  Codable  sheet()  onDelete()  @ObservedObjectKeynotes  The presentation mode of a view contains only two things: a property determining whether it’s visible right now, and a method to dismiss it  UUID already conforms to Codable  @Published announces changes from a property; @ObservedObject watches an observed object for changes  If we add Codable conformance to a type, Swift can generate archiving and unarchiving code for us  UserDefaults is stringly typed (its key names are all strings)  The onDelete() modifier exists only on ForEach  If we use integer(forKey:) and UserDefaults can’t find the key we asked for, it sends back 0  UUIDs aren’t guaranteed to be unique, but the odds of a collision are extremely low  EditButton() will automatically switch between Edit and Done when tapped  IndexSet is a sorted set of integers which is used for deleting views from a ForEach viewCode////  ContentView.swift//  iExpense//import SwiftUIstruct ExpenseItem: Identifiable, Codable {    let id = UUID()    let name: String    let type: String    let amount: Int        enum CodingKeys: String, CodingKey {        case name, type, amount    }}class Expenses: ObservableObject {    @Published var items: [ExpenseItem] {        didSet {            let encoder = JSONEncoder()            if let encoded = try? encoder.encode(items) {                UserDefaults.standard.set(encoded, forKey: \"Items\")            }        }    }        init() {        if let items = UserDefaults.standard.data(forKey: \"Items\") {            let decoder = JSONDecoder()            if let decoded = try? decoder.decode([ExpenseItem].self, from: items) {                self.items = decoded                return            }        }        self.items = []    }}struct ContentView: View {    @ObservedObject var expenses = Expenses()    @State private var showingAddExpense = false        var body: some View {        NavigationView {            List {                ForEach(expenses.items) { item in                    HStack {                        VStack(alignment: .leading) {                            Text(item.name)                                .font(.headline)                            Text(item.type)                        }                        Spacer()                        Text(\"$\\(item.amount)\")                    }                }                .onDelete(perform: removeItems)            }            .navigationBarItems(                leading:                    EditButton(),                trailing:                    Button(action: {                        self.showingAddExpense = true                    }) {                        Image(systemName: \"plus\")                    }            )        }        .sheet(isPresented: $showingAddExpense, content: {            AddView(expenses: self.expenses)        })    }        func removeItems(at offsets: IndexSet) {        expenses.items.remove(atOffsets: offsets)    }}struct ContentView_Previews: PreviewProvider {    static var previews: some View {        ContentView()    }}////  AddView.swift//  iExpense//import SwiftUIstruct AddView: View {    @Environment(\\.presentationMode) var presentationMode        @ObservedObject var expenses: Expenses        @State private var name = \"\"    @State private var type = \"Personal\"    @State private var amount = \"\"    @State private var showingAlert = false        static let types = [\"Business\", \"Personal\"]        var body: some View {        NavigationView {            Form {                TextField(\"Name\", text: $name)                Picker(\"Type\", selection: $type) {                    ForEach(Self.types, id: \\.self) {                        Text($0)                    }                }                TextField(\"Amount\", text: $amount)                    .keyboardType(.numberPad)            }            .navigationBarTitle(\"Add new expense\")            .navigationBarItems(trailing: Button(\"Save\") {                if let actualAmount = Int(self.amount) {                    let item = ExpenseItem(name: self.name, type: self.type, amount: actualAmount)                    self.expenses.items.append(item)                    self.presentationMode.wrappedValue.dismiss()                } else {                    showingAlert = true                }            })            .alert(isPresented: $showingAlert, content: {                Alert(title: Text(\"Invalid Input\"), message: Text(\"Please use a number\"),                dismissButton: .default(Text(\"OK\")))            })        }    }}struct AddView_Previews: PreviewProvider {    static var previews: some View {        AddView(expenses: Expenses())    }}",
            "content_html": "<h3 id=\"keywords\">Keywords</h3><ul>  <li>UserDefaults</li>  <li>Codable</li>  <li>sheet()</li>  <li>onDelete()</li>  <li>@ObservedObject</li></ul><h3 id=\"keynotes\">Keynotes</h3><ol>  <li>The presentation mode of a view contains only two things: a property determining whether it’s visible right now, and a method to dismiss it</li>  <li><code class=\"highlighter-rouge\">UUID</code> already conforms to <code class=\"highlighter-rouge\">Codable</code></li>  <li><code class=\"highlighter-rouge\">@Published</code> announces changes from a property; <code class=\"highlighter-rouge\">@ObservedObject</code> watches an observed object for changes</li>  <li>If we add <code class=\"highlighter-rouge\">Codable</code> conformance to a type, Swift can generate archiving and unarchiving code for us</li>  <li><code class=\"highlighter-rouge\">UserDefaults</code> is stringly typed (its key names are all strings)</li>  <li>The <code class=\"highlighter-rouge\">onDelete()</code> modifier exists only on <code class=\"highlighter-rouge\">ForEach</code></li>  <li>If we use <code class=\"highlighter-rouge\">integer(forKey:)</code> and <code class=\"highlighter-rouge\">UserDefaults</code> can’t find the key we asked for, it sends back 0</li>  <li><code class=\"highlighter-rouge\">UUID</code>s aren’t guaranteed to be unique, but the odds of a collision are extremely low</li>  <li><code class=\"highlighter-rouge\">EditButton()</code> will automatically switch between <strong>Edit</strong> and <strong>Done</strong> when tapped</li>  <li><code class=\"highlighter-rouge\">IndexSet</code> is a sorted set of integers which is used for deleting views from a <code class=\"highlighter-rouge\">ForEach</code> view</li></ol><h3 id=\"code\">Code</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  ContentView.swift</span><span class=\"c1\">//  iExpense</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">ExpenseItem</span><span class=\"p\">:</span> <span class=\"kt\">Identifiable</span><span class=\"p\">,</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"kt\">UUID</span><span class=\"p\">()</span>    <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">String</span>    <span class=\"k\">let</span> <span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>        <span class=\"kd\">enum</span> <span class=\"kt\">CodingKeys</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">CodingKey</span> <span class=\"p\">{</span>        <span class=\"k\">case</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">amount</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">class</span> <span class=\"kt\">Expenses</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">items</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">ExpenseItem</span><span class=\"p\">]</span> <span class=\"p\">{</span>        <span class=\"k\">didSet</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">encoder</span> <span class=\"o\">=</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">encoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">encoder</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"Items\"</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>        <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">items</span> <span class=\"o\">=</span> <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"nf\">data</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"s\">\"Items\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">let</span> <span class=\"nv\">decoder</span> <span class=\"o\">=</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span>            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">decoded</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">([</span><span class=\"kt\">ExpenseItem</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"n\">decoded</span>                <span class=\"k\">return</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">expenses</span> <span class=\"o\">=</span> <span class=\"kt\">Expenses</span><span class=\"p\">()</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingAddExpense</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">List</span> <span class=\"p\">{</span>                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">expenses</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"k\">in</span>                    <span class=\"kt\">HStack</span> <span class=\"p\">{</span>                        <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>                                <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">)</span>                        <span class=\"p\">}</span>                        <span class=\"kt\">Spacer</span><span class=\"p\">()</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"$</span><span class=\"se\">\\(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"nf\">onDelete</span><span class=\"p\">(</span><span class=\"nv\">perform</span><span class=\"p\">:</span> <span class=\"n\">removeItems</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span>                <span class=\"nv\">leading</span><span class=\"p\">:</span>                    <span class=\"kt\">EditButton</span><span class=\"p\">(),</span>                <span class=\"nv\">trailing</span><span class=\"p\">:</span>                    <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span>                        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">showingAddExpense</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                    <span class=\"p\">})</span> <span class=\"p\">{</span>                        <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"s\">\"plus\"</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>            <span class=\"p\">)</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">sheet</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAddExpense</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>            <span class=\"kt\">AddView</span><span class=\"p\">(</span><span class=\"nv\">expenses</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">expenses</span><span class=\"p\">)</span>        <span class=\"p\">})</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">removeItems</span><span class=\"p\">(</span><span class=\"n\">at</span> <span class=\"nv\">offsets</span><span class=\"p\">:</span> <span class=\"kt\">IndexSet</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">expenses</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"nv\">atOffsets</span><span class=\"p\">:</span> <span class=\"n\">offsets</span><span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">ContentView</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//</span><span class=\"c1\">//  AddView.swift</span><span class=\"c1\">//  iExpense</span><span class=\"c1\">//</span><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span><span class=\"kd\">struct</span> <span class=\"kt\">AddView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">presentationMode</span>        <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">expenses</span><span class=\"p\">:</span> <span class=\"kt\">Expenses</span>        <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">type</span> <span class=\"o\">=</span> <span class=\"s\">\"Personal\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">amount</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">showingAlert</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">types</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"Business\"</span><span class=\"p\">,</span> <span class=\"s\">\"Personal\"</span><span class=\"p\">]</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>            <span class=\"kt\">Form</span> <span class=\"p\">{</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Name\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">name</span><span class=\"p\">)</span>                <span class=\"kt\">Picker</span><span class=\"p\">(</span><span class=\"s\">\"Type\"</span><span class=\"p\">,</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>                    <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"k\">Self</span><span class=\"o\">.</span><span class=\"n\">types</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span>                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span>                    <span class=\"p\">}</span>                <span class=\"p\">}</span>                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Amount\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">amount</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">keyboardType</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">numberPad</span><span class=\"p\">)</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarTitle</span><span class=\"p\">(</span><span class=\"s\">\"Add new expense\"</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">navigationBarItems</span><span class=\"p\">(</span><span class=\"nv\">trailing</span><span class=\"p\">:</span> <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Save\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">actualAmount</span> <span class=\"o\">=</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">amount</span><span class=\"p\">)</span> <span class=\"p\">{</span>                    <span class=\"k\">let</span> <span class=\"nv\">item</span> <span class=\"o\">=</span> <span class=\"kt\">ExpenseItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"n\">actualAmount</span><span class=\"p\">)</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">expenses</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">()</span>                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>                    <span class=\"n\">showingAlert</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>                <span class=\"p\">}</span>            <span class=\"p\">})</span>            <span class=\"o\">.</span><span class=\"nf\">alert</span><span class=\"p\">(</span><span class=\"nv\">isPresented</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">showingAlert</span><span class=\"p\">,</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"p\">{</span>                <span class=\"kt\">Alert</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Invalid Input\"</span><span class=\"p\">),</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Please use a number\"</span><span class=\"p\">),</span>                <span class=\"nv\">dismissButton</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">default</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"OK\"</span><span class=\"p\">)))</span>            <span class=\"p\">})</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">AddView_Previews</span><span class=\"p\">:</span> <span class=\"kt\">PreviewProvider</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">previews</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">AddView</span><span class=\"p\">(</span><span class=\"nv\">expenses</span><span class=\"p\">:</span> <span class=\"kt\">Expenses</span><span class=\"p\">())</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/iExpense",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-10-19T00:00:00-04:00",
            "date_modified": "2020-10-19T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/photo/test",
            "title": "Photo Test",
            "summary": "Photo test.",
            "content_text": "",
            "content_html": "<p><img src=\"/assets/img/chemin_wakefield_heights.jpg\" alt=\"Chemin Wakefield-Heights\" /></p>",
            "url": "http://localhost:4000/photo/test",
            
            
            
            
            
            "date_published": "2020-10-19T00:00:00-04:00",
            "date_modified": "2020-10-19T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/swiftui/animation",
            "title": "Animation",
            "summary": "Learning SwiftUI with hackingwithswift.",
            "content_text": "Radial Buttonstruct ContentView: View {    @State private var animationAmount: CGFloat = 1        var body: some View{        Button(\"Tap Me\") {            self.animationAmount += 1        }        .padding(50)        .background(Color.red)        .foregroundColor(.white)        .clipShape(Circle())        .overlay(            Circle()                .stroke(Color.red)                .scaleEffect(animationAmount)                .opacity(Double(2 - animationAmount))                .animation(                    Animation.easeOut(duration: 1)                        .repeatForever(autoreverses: false)                )        )        .onAppear {            self.animationAmount = 2        }    }}Animation Bindingstruct ContentView: View {    @State private var animationAmount: CGFloat = 1        var body: some View {        VStack {            Stepper(\"Scale amount\", value: $animationAmount.animation(), in: 1...10)            Spacer()            Button(\"Tap Me\") {                self.animationAmount += 1            }            .padding(40)            .background(Color.red)            .foregroundColor(.white)            .clipShape(Circle())            .scaleEffect(animationAmount)        }    }}Explicit Animationsstruct ContentView: View {    @State private var animationAmount = 0.0        var body: some View {        Button(\"Tap Me\") {            withAnimation(.interpolatingSpring(stiffness: 5, damping: 1)) {                self.animationAmount += 360            }        }        .padding(50)        .background(Color.red)        .foregroundColor(.white)        .clipShape(Circle())        .rotation3DEffect(            .degrees(animationAmount),            axis: (x: 1, y: 0, z: 0))    }}Animation StackYou can attach the animation() modifier several times, and the order in which you use it matters.struct ContentView: View {    @State private var enabled = true        var body: some View {        Button(\"Tap Me\") {            self.enabled.toggle()        }        .frame(width: 200, height: 200, alignment: .center)        .background(enabled ? Color.blue : Color.red)        .animation(.default)        .foregroundColor(.white)        .clipShape(RoundedRectangle(cornerRadius: enabled ? 60 : 0))        .animation(.interpolatingSpring(stiffness: 10, damping: 1))    }}Animating Gesturestruct ContentView: View {    let letters = Array(\"Hello SwiftUI\")    @State private var enabled = false    @State private var dragAmount = CGSize.zero    var body: some View {        HStack(spacing: 0) {            ForEach(0..&lt;letters.count) { num in                Text(String(self.letters[num]))                    .padding(5)                    .font(.title)                    .background(self.enabled ? Color.blue : Color.red)                    .offset(self.dragAmount)                    .animation(Animation.default.delay(Double(num) / 20))            }        }        .gesture(            DragGesture()                .onChanged { self.dragAmount = $0.translation }                .onEnded { _ in                    self.dragAmount = .zero                    self.enabled.toggle()                }        )    }}Showing and Hiding Views with Transitionstruct ContentView: View {    @State private var isShowingRed = false        var body: some View {        VStack {            Button(\"Tap Me\") {                withAnimation {                    self.isShowingRed.toggle()                }            }                        if isShowingRed {                Rectangle()                    .fill(Color.red)                    .frame(width: 200, height: 200)                    .transition(.asymmetric(insertion: .scale, removal: .opacity))            }        }    }}Building Custom Transition with ViewModifierstruct CornerRotateModifier: ViewModifier {    let amount: Double    let anchor: UnitPoint    func body(content: Content) -&gt; some View {        content.rotationEffect(.degrees(amount), anchor: anchor).clipped()    }}extension AnyTransition {    static var pivot: AnyTransition {        .modifier(            active: CornerRotateModifier(amount: -90, anchor: .topLeading),            identity: CornerRotateModifier(amount: 0, anchor: .topLeading)        )    }}struct ContentView: View {    @State private var isShowingRed = false        var body: some View {        VStack {            Button(\"Tap Me\") {                withAnimation {                    self.isShowingRed.toggle()                }            }                        if isShowingRed {                Rectangle()                    .fill(Color.red)                    .frame(width: 200, height: 200)                    .transition(.pivot)            }        }    }}",
            "content_html": "<h3 id=\"radial-button\">Radial Button</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">animationAmount</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span><span class=\"p\">{</span>        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Circle</span><span class=\"p\">())</span>        <span class=\"o\">.</span><span class=\"nf\">overlay</span><span class=\"p\">(</span>            <span class=\"kt\">Circle</span><span class=\"p\">()</span>                <span class=\"o\">.</span><span class=\"nf\">stroke</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"nf\">scaleEffect</span><span class=\"p\">(</span><span class=\"n\">animationAmount</span><span class=\"p\">)</span>                <span class=\"o\">.</span><span class=\"nf\">opacity</span><span class=\"p\">(</span><span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">animationAmount</span><span class=\"p\">))</span>                <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span>                    <span class=\"kt\">Animation</span><span class=\"o\">.</span><span class=\"nf\">easeOut</span><span class=\"p\">(</span><span class=\"nv\">duration</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">)</span>                        <span class=\"o\">.</span><span class=\"nf\">repeatForever</span><span class=\"p\">(</span><span class=\"nv\">autoreverses</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>                <span class=\"p\">)</span>        <span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"n\">onAppear</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"animation-binding\">Animation Binding</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">animationAmount</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">Stepper</span><span class=\"p\">(</span><span class=\"s\">\"Scale amount\"</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">animationAmount</span><span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(),</span> <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">...</span><span class=\"mi\">10</span><span class=\"p\">)</span>            <span class=\"kt\">Spacer</span><span class=\"p\">()</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>            <span class=\"p\">}</span>            <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>            <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Circle</span><span class=\"p\">())</span>            <span class=\"o\">.</span><span class=\"nf\">scaleEffect</span><span class=\"p\">(</span><span class=\"n\">animationAmount</span><span class=\"p\">)</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"explicit-animations\">Explicit Animations</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">animationAmount</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"nf\">withAnimation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">interpolatingSpring</span><span class=\"p\">(</span><span class=\"nv\">stiffness</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"nv\">damping</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">{</span>                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">animationAmount</span> <span class=\"o\">+=</span> <span class=\"mi\">360</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">Circle</span><span class=\"p\">())</span>        <span class=\"o\">.</span><span class=\"nf\">rotation3DEffect</span><span class=\"p\">(</span>            <span class=\"o\">.</span><span class=\"nf\">degrees</span><span class=\"p\">(</span><span class=\"n\">animationAmount</span><span class=\"p\">),</span>            <span class=\"nv\">axis</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nv\">x</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">y</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">z</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"animation-stack\">Animation Stack</h3><p>You can attach the animation() modifier several times, and the order in which you use it matters.</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">center</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"n\">enabled</span> <span class=\"p\">?</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"nv\">blue</span> <span class=\"p\">:</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>        <span class=\"o\">.</span><span class=\"nf\">clipShape</span><span class=\"p\">(</span><span class=\"kt\">RoundedRectangle</span><span class=\"p\">(</span><span class=\"nv\">cornerRadius</span><span class=\"p\">:</span> <span class=\"n\">enabled</span> <span class=\"p\">?</span> <span class=\"mi\">60</span> <span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">))</span>        <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">interpolatingSpring</span><span class=\"p\">(</span><span class=\"nv\">stiffness</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nv\">damping</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"animating-gesture\">Animating Gesture</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">letters</span> <span class=\"o\">=</span> <span class=\"kt\">Array</span><span class=\"p\">(</span><span class=\"s\">\"Hello SwiftUI\"</span><span class=\"p\">)</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">enabled</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">dragAmount</span> <span class=\"o\">=</span> <span class=\"kt\">CGSize</span><span class=\"o\">.</span><span class=\"n\">zero</span>    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">HStack</span><span class=\"p\">(</span><span class=\"nv\">spacing</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..&lt;</span><span class=\"n\">letters</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">num</span> <span class=\"k\">in</span>                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">letters</span><span class=\"p\">[</span><span class=\"n\">num</span><span class=\"p\">]))</span>                    <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">enabled</span> <span class=\"p\">?</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"nv\">blue</span> <span class=\"p\">:</span> <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">offset</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dragAmount</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">animation</span><span class=\"p\">(</span><span class=\"kt\">Animation</span><span class=\"o\">.</span><span class=\"k\">default</span><span class=\"o\">.</span><span class=\"nf\">delay</span><span class=\"p\">(</span><span class=\"kt\">Double</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">20</span><span class=\"p\">))</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>        <span class=\"o\">.</span><span class=\"nf\">gesture</span><span class=\"p\">(</span>            <span class=\"kt\">DragGesture</span><span class=\"p\">()</span>                <span class=\"o\">.</span><span class=\"n\">onChanged</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dragAmount</span> <span class=\"o\">=</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">translation</span> <span class=\"p\">}</span>                <span class=\"o\">.</span><span class=\"n\">onEnded</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"k\">in</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">dragAmount</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">zero</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">enabled</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>                <span class=\"p\">}</span>        <span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"showing-and-hiding-views-with-transition\">Showing and Hiding Views with Transition</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">isShowingRed</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"n\">withAnimation</span> <span class=\"p\">{</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowingRed</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>                        <span class=\"k\">if</span> <span class=\"n\">isShowingRed</span> <span class=\"p\">{</span>                <span class=\"kt\">Rectangle</span><span class=\"p\">()</span>                    <span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">transition</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">asymmetric</span><span class=\"p\">(</span><span class=\"nv\">insertion</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">scale</span><span class=\"p\">,</span> <span class=\"nv\">removal</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">opacity</span><span class=\"p\">))</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><h3 id=\"building-custom-transition-with-viewmodifier\">Building Custom Transition with ViewModifier</h3><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">CornerRotateModifier</span><span class=\"p\">:</span> <span class=\"kt\">ViewModifier</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"kt\">Double</span>    <span class=\"k\">let</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"kt\">UnitPoint</span>    <span class=\"kd\">func</span> <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"kt\">Content</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"nf\">rotationEffect</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">degrees</span><span class=\"p\">(</span><span class=\"n\">amount</span><span class=\"p\">),</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"n\">anchor</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">clipped</span><span class=\"p\">()</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">extension</span> <span class=\"kt\">AnyTransition</span> <span class=\"p\">{</span>    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">pivot</span><span class=\"p\">:</span> <span class=\"kt\">AnyTransition</span> <span class=\"p\">{</span>        <span class=\"o\">.</span><span class=\"nf\">modifier</span><span class=\"p\">(</span>            <span class=\"nv\">active</span><span class=\"p\">:</span> <span class=\"kt\">CornerRotateModifier</span><span class=\"p\">(</span><span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">90</span><span class=\"p\">,</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">topLeading</span><span class=\"p\">),</span>            <span class=\"nv\">identity</span><span class=\"p\">:</span> <span class=\"kt\">CornerRotateModifier</span><span class=\"p\">(</span><span class=\"nv\">amount</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">topLeading</span><span class=\"p\">)</span>        <span class=\"p\">)</span>    <span class=\"p\">}</span><span class=\"p\">}</span><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">isShowingRed</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Tap Me\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"n\">withAnimation</span> <span class=\"p\">{</span>                    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">isShowingRed</span><span class=\"o\">.</span><span class=\"nf\">toggle</span><span class=\"p\">()</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>                        <span class=\"k\">if</span> <span class=\"n\">isShowingRed</span> <span class=\"p\">{</span>                <span class=\"kt\">Rectangle</span><span class=\"p\">()</span>                    <span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">)</span>                    <span class=\"o\">.</span><span class=\"nf\">transition</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">pivot</span><span class=\"p\">)</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div>",
            "url": "http://localhost:4000/swiftui/animation",
            
            
            
            "tags": ["swiftui","hackingwithswift"],
            
            "date_published": "2020-10-17T00:00:00-04:00",
            "date_modified": "2020-10-17T00:00:00-04:00",
            
                "author": 
                "{"twitter"=>"Devaib", "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}